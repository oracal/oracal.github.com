<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thomas Whitton]]></title>
  <link href="http://www.thomaswhitton.com/atom.xml" rel="self"/>
  <link href="http://www.thomaswhitton.com/"/>
  <updated>2014-01-26T19:46:08+00:00</updated>
  <id>http://www.thomaswhitton.com/</id>
  <author>
    <name><![CDATA[Thomas Whitton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Perfect Programming Language From Scratch]]></title>
    <link href="http://www.thomaswhitton.com/blog/2014/01/07/my-perfect-programming-language-from-scratch/"/>
    <updated>2014-01-07T01:27:57+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2014/01/07/my-perfect-programming-language-from-scratch</id>
    <content type="html"><![CDATA[<p>After taking the Programming Languages Course from Courser and learning a couple of new languages recently I&rsquo;ve found myself really looking at the beauty of programming languages and wanted to spend a little time coming up with my own perfect language from scratch. To start off I will not worry about implementation details, this will allow me to concentrate on the language itself rather than coding challenges. Eventually I hope to create a minimal implementation to try out my new language.</p>

<!-- more -->


<h2>Paradigms</h2>

<p>I think it will be good to start with some simple paradigms of the language, which I will go through now with some basic reasoning behind each.</p>

<p>Having a <strong>statically typed</strong> language is very helpful in catching bugs that would otherwise be missed in a dynamic language. It also allows much better tooling to be created around that language such as code analysers. The only problem with it is the amount of verbosity that comes with writing the code, this can be heavily offset with a <strong>global type inference</strong> system that means that most type declarations are no longer needed (but can be optionally added for readability). In fact it should be possible to only ever use a type declaration when creating a class, this includes a very useful and comprehensive set of type literals.</p>

<p>It has been shown in pretty much every other language (especially in functional, as per the name) to be able to pass functions around as if they were like variables, including functions that have already had some of their arguments passed in. To this end all language will provide <strong>first class functions</strong>. To accomplish this with minimal specialising of the language for functions, the functions will be made to be an object and in fact the language will take the <strong>object orientated</strong> approach of everything is an object.</p>

<p>I really enjoy programming in c++, and being in control of the system as much as possible, however, I still will use smart pointers as much as I can to avoid worrying about memory. I think nowadays any implementation of a language should be smart enough to be able to efficiently deal with memory, and allow the programmer to worry about more important things, and as such this language will have <strong>managed memory</strong>.</p>

<p>I won&rsquo;t bother reiterating the countless posts and discussions about how allowing mutability of variables leads to problems within a language. But I will mention that I believe having <strong>immutability by default</strong> can make some pretty interesting efficient data structures. I also understand the need for being able to have mutable variables occasionally, but I agree with with SML approach for this, and that is that you have to <strong>explicitly declare a mutable variable</strong> and that <strong>only allow the reference to be mutable and it will just be able to point to an entirely different object</strong>.</p>

<p>Lastly just a few little additions that I have found very useful, and that is having <strong>if statements as expressions</strong> which allows for some very neat code, <strong>tail call optimization</strong>, and <strong>lexicographically scoped</strong>.</p>

<h2>General Syntax</h2>

<p>After recently learning and programming in my first lisp/scheme, I really loved the simplicity of the syntax, however, I felt like it went slightly too far, and made it harder for programmers to understand at a glance what was happening. To that end I believe that having as <strong>minimal syntax</strong> as possible, and therefore a <strong>minimal set of keywords</strong> without decreasing the readability of code is a worthwhile goal.</p>

<ul>
<li>C like.</li>
<li>Semicolons separate expressions.</li>
<li>White space doesn&rsquo;t matter, except that new lines can separate expressions rather than using semicolons.</li>
<li>Scope using curly brackets.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coursera Course Reviews]]></title>
    <link href="http://www.thomaswhitton.com/blog/2014/01/06/coursera-course-reviews/"/>
    <updated>2014-01-06T00:01:34+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2014/01/06/coursera-course-reviews</id>
    <content type="html"><![CDATA[<p>Lately I have been really interested in participating in some of the programming related massive open online courses (MOOCs) offered by <a href="https://www.coursera.org/">Coursera</a>. Coursera offers a really great platform for learning; providing multiple ways to test students&#8217; understanding of the material and also most importantly a large community of like minded people in the Coursera discussion forums providing invaluable help to others.</p>

<!-- more -->


<h2><a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a></h2>

<p>This course was my first introduction to functional programming apart from the useful functional helper methods and various other techniques that have seeped into most high-level languages. This was also my first time using Scala, which I had been meaning to try out for a while now. I really enjoyed the Scala language, but a lot of the course involved learning some of the basics of the language rather than learning functional programming. The course was very similar to the amazing Structure and Interpretation of Computer Programs (SICP) book, used in many university courses, but using Scala instead of Scheme. I found the course material very useful and it has actually given me the desire to work with Scala in the future.</p>

<p>I found the material easy to grasp and the exercises were relatively simple, the one thing that I did take a little bit more time was that I was trying to make my answers to the exercises into beautiful one line solutions (once you go functional&hellip;).</p>

<h2><a href="https://www.coursera.org/course/proglang">Programming Languages</a></h2>

<p>This course covers a lot of different material in programming language theory: static functional (using SML), dynamic functional (using racket, a scheme) and dynamic object orientation (using ruby). The functional part was a very good introduction to functional programming, SML was such a simple language that we could spend most of the time learning about functional programming rather than quirks of the language. In the next section I really liked learning about the simplicity of a scheme. Personally though I feel that it is too hard for a programmer to quickly understand code with so many brackets. As someone who has done a lot of object orientated programming (OOP) previously, I found the OOP part of the course to be a lot easier than the rest. But obviously if I were to come into the course with no experience of OOP then I probably would have found it the same level of difficulty as the rest of the course. The entire course was very interesting and has made me much more interested in programming language design, and to learn many more programming paradigms in other languages.</p>

<p>I found the assignments quite challenging, especially towards the end of the course. The grading policy was also quite strict, giving you an average of your first two submissions. One different aspect to the course compared to most other courses was that there was a peer review section, I found this particularly useful as I believe it made me more deeply understand the common problems that occur and also it provided a sample solution which was very useful in checking if you had completed assignments correctly.</p>

<h2><a href="https://www.coursera.org/course/ml">Machine Learning</a></h2>

<p>This is the fundamental machine learning course that has been provided openly by Standford for a while now, and was one of the first available courses on Coursera. It taught many of the essential techniques for machine learning, which I found quite easy to grasp, as most of the ideas were common sense converted into maths and computational algorithms. I think this course has given me a better grasp on what machine learning actually is, as well as all the terminology associated with it. Also how I can use pretty simple techniques to actually analyze large sets of data very quickly and to great effect. With this information under my belt I believe I can handle a complex machine learning project, that uses techniques well beyond that of the course, with only a little bit of googling.</p>

<p>Octave was used for the programming language and I can understand why, as it made the programming exercises very easy to accomplish and meant that you only had to worry about the machine learning techniques rather than the code.</p>

<h2><a href="https://www.coursera.org/course/reactive">Principles of Reactive Programming</a></h2>

<p>This was a brand new course offered by Coursera as a sequel to the very popular &ldquo;Functional Programming Principles in Scala&rdquo; course mentioned previously, although it was not as polished as its predecessor. However, I really enjoyed learning about some of the advanced techniques in reactive programming. I thought the discussion on monads was very good and I really liked learning about the actor model and I think it was very easy to grasp from the lectures. Especially being able to use it with <a href="http://akka.io/">akka</a>, which is a very mature actor framework for the JVM. I found a lot of the Future/Promises lectures slightly too theoretical, it was fine once I actually used it in the programming exercises, however, a lot of it blew my mind a little bit during the videos.</p>

<p>I found the exercises very rewarding, as they really delved deep into modern reactive frameworks at the cutting edge of programming. Not only that but being able to write more complicated scala considerably deepened my interest in the language. I feel that with a few more iterations of the course, and taking into account the comments from students, that this course will become as popular and fundamental as its predecessor.</p>

<p>For the new year I am taking <a href="https://www.coursera.org/course/comnetworks">Computer Networks</a>, <a href="https://www.coursera.org/course/crypto">Cryptography 1</a> and <a href="https://www.coursera.org/course/android">Programming Mobile Applications for Android Handheld Systems</a>, which all look to be interesting and useful courses. I encourage you to use Coursera to develop your abilities, as I believe that as programmers we should never stop learning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Zeromq]]></title>
    <link href="http://www.thomaswhitton.com/blog/2013/12/20/introduction-to-zeromq/"/>
    <updated>2013-12-20T11:43:00+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2013/12/20/introduction-to-zeromq</id>
    <content type="html"><![CDATA[<p>In the modern world there are rarely any stand alone applications anymore. Everything is connected. Whether it be an android application calling a restful api or a webpage connecting to thousands of internet users. When working with large systems there is always a need for communication between connected components. Web services are often a great way to communicate with each other and allow a single restful api to control all componenets. However, sometimes we need faster communication between components. This is needed so often that it seems weird that everytime it is needed people seem to roll their own, ussualy some some awkward messaging format using a custom wrapper around the socket api (more often than not an OS dependent one).</p>

<!-- more -->


<h2>Over the Wire</h2>

<p>The socket api is fundamental to network communication, it is the standard that has existed for many years, it provides a file like api to network commnications which abstracts the complications of network transport. It is very useful and powerful, but it is too low-lovel. There are too many edge cases in which you must protect yourself against. Many people create custom wrappers around the socket api to deal with these edge cases. In c++ there is the boost asio library which abstracts the socket api, but not by much (in fact it still uses sockets, it just makes them platform independent). These custom wrappers never catch everything and often take quite a bit of time to create.</p>

<p>Why not use a library created by some of the experts in the field and which deals with a lot of these edge cases for you?</p>

<p>Enter zeromq. Zeromq provides a very powerful abstraction on communication, which allows networked applications to talk to each other very easily and resiliently. The blurb from the developers themselves provides a very good description of what zeromq is and what it does:</p>

<blockquote><p>ØMQ (also seen as ZeroMQ, 0MQ, zmq) looks like an embeddable networking library but acts like a concurrency framework. It gives you sockets that carry atomic messages across various transports like in-process, inter-process, TCP, and multicast. You can connect sockets N-to-N with patterns like fanout, pub-sub, task distribution, and request-reply. It&rsquo;s fast enough to be the fabric for clustered products. Its asynchronous I/O model gives you scalable multicore applications, built as asynchronous message-processing tasks. It has a score of language APIs and runs on most operating systems. ØMQ is from iMatix and is LGPLv3 open source.</p></blockquote>

<p>Now that I have given you a brief introduction lets see what this library can do.</p>

<h2>Implementation</h2>

<p>The first example I will show you is the most simplest possible. In fact this could easily be done using sockets. It is a simple request and response between a client and server. Specifically in this example I pass a msgpack binary message over the zeromq connection.</p>

<p>A couple of c++ implementation details to note is that all data that zeromq passes around inside messages uses void pointers, and these need to be staticaly cast into the type of data that you actually want (msgpack uses char *, but a lot of the time these will be converted into std::strings, I&rsquo;ll do this plenty of times in my json examples). Also since everything that is sent over zeromq is formed of messages we must populate zmq::message_t objects and send them using the zeromq socket api. One final thing to note down is that zeromq needs to work with multiple languages including ones that treat strings differently, namely null terminating string compared to most other types of strings. To keep things consistent zeromq has decided to not send null terminating strings so this is a very important factor to keep in mind when dealing with languages that use null terminating strings such as c++.</p>

<h2>Request Reply</h2>

<p>The client below starts by generating some msgpack data, then it creates a zeromq context, this is required for an application to use zeromq and starts off all the asyncrounous fun that zeromq uses behind the scenes. The number argument that you pass to this context is the amount of threads that zeromq will use in the background and should obviously be optimised for your application/hardware. Next we create a zmq socket that has a very similar api to a normal socket, however we pass to it an ENUM which describes the scenario that we would like zeromq to use, in this case the request part of a request-reply scenario. There are quite a few scenarios and I will go over a few of them in this post.</p>

<p>Once the socket has been created it needs to be connected to an end point. In this case the server application that will be shown below. It is important to note that the server doesn&rsquo;t neccesarily need to be started first for the client to connect to it. Due to the way way zeromq buffers messages either one can be started first.</p>

<p>For each piece of data that we send to the socket we are required to create a zmq::message_t object which we can populate with any data cast to a void * pointer. When we create a zmq message we must pass into it the amount of bytes that message will be in the constructor. We can then memcpy the data over to it.</p>

<p>Then it&rsquo;s just a matter of sending over the message and receiving a reply message.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// the vector that is going to be sent</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
</span><span class='line'><span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;MessagePack&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// serialize it into simple buffer.</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">sbuffer</span> <span class="n">sbuf</span><span class="p">;</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">pack</span><span class="p">(</span><span class="n">sbuf</span><span class="p">,</span> <span class="n">vec</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  Prepare our context and socket</span>
</span><span class='line'><span class="n">zmq</span><span class="o">::</span><span class="n">context_t</span> <span class="n">context</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">zmq</span><span class="o">::</span><span class="n">socket_t</span> <span class="n">socket</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">ZMQ_REQ</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">socket</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5555&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  Do 10 requests, waiting each time for a response</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">request_nbr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">request_nbr</span> <span class="o">!=</span> <span class="mi">10</span><span class="p">;</span> <span class="n">request_nbr</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// create request object, fill it up and send it</span>
</span><span class='line'>    <span class="n">zmq</span><span class="o">::</span><span class="n">message_t</span> <span class="n">request</span><span class="p">(</span><span class="n">sbuf</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">sbuf</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">sbuf</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>    <span class="n">socket</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  Get the reply.</span>
</span><span class='line'>    <span class="n">zmq</span><span class="o">::</span><span class="n">message_t</span> <span class="n">reply</span><span class="p">;</span>
</span><span class='line'>    <span class="n">socket</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">reply</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the server, it sets things up in a very similar way to the client, except that this time we use the reply ENUM ZMQ_REP, and we bind the server to a port rather than to an ip address.</p>

<p>This time we create a zmq::message_t object to receive the incoming message. We do not pass a number to the constructor of the message object this time since obviously we don&rsquo;t know yet what that is and also since when we pass it into the socket.recv() method the size will be populated with the incoming message size. In the example we then decode the msgpack message and turn it into a static type object and then send a reply back, all very easy stuff.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//  Prepare our context and socket</span>
</span><span class='line'><span class="n">zmq</span><span class="o">::</span><span class="n">context_t</span> <span class="n">context</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">zmq</span><span class="o">::</span><span class="n">socket_t</span> <span class="n">socket</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">ZMQ_REP</span><span class="p">);</span>
</span><span class='line'><span class="n">socket</span><span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;tcp://*:5555&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">zmq</span><span class="o">::</span><span class="n">message_t</span> <span class="n">request</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  Wait for next request from client</span>
</span><span class='line'>    <span class="n">socket</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">request</span><span class="p">);</span>
</span><span class='line'>    <span class="n">msgpack</span><span class="o">::</span><span class="n">sbuffer</span> <span class="n">sbuf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sbuf</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">()),</span> <span class="n">request</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// deserialize it.</span>
</span><span class='line'>    <span class="n">msgpack</span><span class="o">::</span><span class="n">unpacked</span> <span class="n">msg</span><span class="p">;</span>
</span><span class='line'>    <span class="n">msgpack</span><span class="o">::</span><span class="n">unpack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="n">sbuf</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">sbuf</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// print the deserialized object.</span>
</span><span class='line'>    <span class="n">msgpack</span><span class="o">::</span><span class="n">object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">obj</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// convert it into statically typed object.</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">rvec</span><span class="p">;</span>
</span><span class='line'>    <span class="n">obj</span><span class="p">.</span><span class="n">convert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rvec</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Do some &#39;work&#39;</span>
</span><span class='line'>    <span class="n">sleep</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  Send reply back to client</span>
</span><span class='line'>    <span class="n">zmq</span><span class="o">::</span><span class="n">message_t</span> <span class="n">reply</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">reply</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="s">&quot;Hello World&quot;</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
</span><span class='line'>    <span class="n">socket</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">reply</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Publish and Subscribe</h2>

<p>The publish and subscribe pattern is quite a common network structure and involves a single server constantly outputting data and clients subscribing to the server so that they too receive the same information from the server. If just using sockets for this problem alot of extra code would have to be written to accomodate this new architecture, having to deal with the subscriptions of all clients and making sure that edge cases of this system would not cause a problem.</p>

<p>Below is an example of a weather server sending out important weather information. It is very similar to the example given in the Zeromq documentation, however I have replaced the data being sent to a json representation. You will notice that underlying zeromq code for this is very similar to the response and reply examples above, with the only real difference being the second argument to the socket constructor. The enum ZMQ_PUB defines the publisher socket type and means that all the extra complexities of using a publisher subscriber pattern will now be dealt with under the zeromq socket api. And similarly with the client example below the ZMQ_SUB enum is passed in allowing the specific socket code for subscriptions to be applied.</p>

<p>One extra detail in this example is that there is an envelope message which is supposed to define the type of message being sent, this uses two separate zeromq messages but uses the ZMQ_SNDMORE argument to the send method (part of the zeromq api). This means that the message will only be sent the next time a send without ZMQ_SNDMORE argument is called. This allows you to combine separate zeromq messages into single &ldquo;real messages&rdquo;. In this example it is used to filter out certain messages from the publisher.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define within(num) (int) ((float) num * random () / (RAND_MAX + 1.0))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  Prepare our context and publisher</span>
</span><span class='line'><span class="n">zmq</span><span class="o">::</span><span class="n">context_t</span> <span class="n">context</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">zmq</span><span class="o">::</span><span class="n">socket_t</span> <span class="n">publisher</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">ZMQ_PUB</span><span class="p">);</span>
</span><span class='line'><span class="n">publisher</span><span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="s">&quot;tcp://*:5556&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">Value</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  Initialize random number generator</span>
</span><span class='line'><span class="n">srandom</span><span class="p">((</span><span class="kt">unsigned</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">zipcode</span><span class="p">,</span> <span class="n">temperature</span><span class="p">,</span> <span class="n">relhumidity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  Get values that will fool the boss</span>
</span><span class='line'>    <span class="n">zipcode</span>     <span class="o">=</span> <span class="n">within</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
</span><span class='line'>    <span class="n">temperature</span> <span class="o">=</span> <span class="n">within</span><span class="p">(</span><span class="mi">215</span><span class="p">)</span> <span class="o">-</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="n">relhumidity</span> <span class="o">=</span> <span class="n">within</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="n">root</span><span class="p">[</span><span class="s">&quot;zipcode&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">zipcode</span><span class="p">;</span>
</span><span class='line'>    <span class="n">root</span><span class="p">[</span><span class="s">&quot;temperature&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">;</span>
</span><span class='line'>    <span class="n">root</span><span class="p">[</span><span class="s">&quot;relhumidity&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">relhumidity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Json</span><span class="o">::</span><span class="n">StyledWriter</span> <span class="n">styledWriter</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">styledWriter</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Json</span><span class="o">::</span><span class="n">FastWriter</span> <span class="n">fastWriter</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">jsonMessage</span> <span class="o">=</span> <span class="n">fastWriter</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//  Send message to all subscribers</span>
</span><span class='line'>    <span class="n">zmq</span><span class="o">::</span><span class="n">message_t</span> <span class="n">message</span><span class="p">(</span><span class="n">jsonMessage</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
</span><span class='line'>    <span class="n">zmq</span><span class="o">::</span><span class="n">message_t</span> <span class="n">filter</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">filter</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">jsonMessage</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">jsonMessage</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
</span><span class='line'>    <span class="c1">// send a message that will wait for other messages to send using flag</span>
</span><span class='line'>    <span class="n">publisher</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">filter</span><span class="p">,</span> <span class="n">ZMQ_SNDMORE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">publisher</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The client example below is very similar to the client in the request reply example above.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// set up jsoncpp objects</span>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">Value</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">Reader</span> <span class="n">reader</span><span class="p">;</span>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">StyledWriter</span> <span class="n">styledWriter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set up zeromq context</span>
</span><span class='line'><span class="n">zmq</span><span class="o">::</span><span class="n">context_t</span> <span class="n">context</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  Socket to talk to server</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Collecting updates from server...&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">zmq</span><span class="o">::</span><span class="n">socket_t</span> <span class="n">subscriber</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">ZMQ_SUB</span><span class="p">);</span>
</span><span class='line'><span class="n">subscriber</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;tcp://localhost:5556&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// subscribe to filter</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">filter</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">subscriber</span><span class="p">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">ZMQ_SUBSCRIBE</span><span class="p">,</span> <span class="n">filter</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">filter</span><span class="p">.</span><span class="n">length</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  Process 100 updates</span>
</span><span class='line'><span class="kt">int</span> <span class="n">update_nbr</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">update_nbr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">update_nbr</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">update_nbr</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">zmq</span><span class="o">::</span><span class="n">message_t</span> <span class="n">envelope</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zmq</span><span class="o">::</span><span class="n">message_t</span> <span class="n">update</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// receive the envelope message which is used to filter out subscribers</span>
</span><span class='line'>    <span class="n">subscriber</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">envelope</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// receive the json message and actually do soemthing with it</span>
</span><span class='line'>    <span class="n">subscriber</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="o">&amp;</span><span class="n">update</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// convert non null terminating cstring into a string</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">response</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span>
</span><span class='line'>            <span class="k">static_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">update</span><span class="p">.</span><span class="n">data</span><span class="p">()),</span>
</span><span class='line'>            <span class="n">update</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// parse json data</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">parsingSuccessful</span> <span class="o">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">parsingSuccessful</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">styledWriter</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I have just given some basic examples of using zeromq and how easy it is to use. Zeromq has quite a few different network patterns at its disposal and many of them are much more complex, however, they all have a similar simple api to use (the hard part is understanding the network pattern itself). What I am mainly interested in is the use of zeromq in edge-cases, such as network connectivity issues; I believe it will allow me to write much more fault-tolerant software in the future. I look forward to using zeromq in real applications and learning about the other network patterns available.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Message Format C++ Examples]]></title>
    <link href="http://www.thomaswhitton.com/blog/2013/07/03/binary-message-format-c-plus-plus-examples/"/>
    <updated>2013-07-03T15:44:00+01:00</updated>
    <id>http://www.thomaswhitton.com/blog/2013/07/03/binary-message-format-c-plus-plus-examples</id>
    <content type="html"><![CDATA[<p>One of the main reasons c++ is chosen as a language for an application is so that it can squeeze every last bit of performance out of your computer. With a networked application this quest for performance is combined with the network&rsquo;s performance. A lot of the time we have no control over the network that the application is on and therefore our only control over this performance factor is the amount of data we are sending across it. Binary message formats allow us to compress data much more efficiently than other formats and therefore are a good match to c++. Below are a couple of code examples, using binary message formats in c++.</p>

<!-- more -->


<h2>Protobuf C++ Example</h2>

<p>Below is the schema for an address book example, this is used to generate c++ code using the protobuf compiler, using this command to put the generated code into the &ldquo;generated&rdquo; directory: protoc AddressBook.proto &mdash;cpp_out=generated. As you would expect it generates two files, a header and an implementation file. These need to be included and compiled, respectively, with the code using them.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">message</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">int32</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">string</span> <span class="n">email</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">enum</span> <span class="n">PhoneType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MOBILE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">HOME</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">WORK</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message</span> <span class="n">PhoneNumber</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">string</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">PhoneType</span> <span class="n">type</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span><span class="k">default</span> <span class="o">=</span> <span class="n">HOME</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">PhoneNumber</span> <span class="n">phone</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">AddressBook</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below the protobuf is created and in this case is serialized to a string value, there are many protobuf methods to serialize the protobuf into different formats but with string you do not have to worry about memory allocation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">createProtobuf</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AddressBook</span> <span class="n">address_book</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add an address.</span>
</span><span class='line'>    <span class="n">Person</span><span class="o">*</span> <span class="n">person</span> <span class="o">=</span> <span class="n">address_book</span><span class="p">.</span><span class="n">add_person</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_id</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_name</span><span class="p">(</span><span class="s">&quot;Thomas Whitton&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">person</span><span class="o">-&gt;</span><span class="n">set_email</span><span class="p">(</span><span class="s">&quot;mail@thomaswhitton.com&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Person</span><span class="o">::</span><span class="n">PhoneNumber</span><span class="o">*</span> <span class="n">phone_number</span> <span class="o">=</span> <span class="n">person</span><span class="o">-&gt;</span><span class="n">add_phone</span><span class="p">();</span>
</span><span class='line'>    <span class="n">phone_number</span><span class="o">-&gt;</span><span class="n">set_number</span><span class="p">(</span><span class="s">&quot;123456890&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">phone_number</span><span class="o">-&gt;</span><span class="n">set_type</span><span class="p">(</span><span class="n">Person</span><span class="o">::</span><span class="n">MOBILE</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">address_book</span><span class="p">.</span><span class="n">SerializeToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not too much interesting code below, all it does is output the protobuf message defined above. Useful for understanding the different getters available in the protobuf api.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">outputAddresBook</span><span class="p">(</span><span class="k">const</span> <span class="n">AddressBook</span> <span class="o">&amp;</span><span class="n">address_book</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">address_book</span><span class="p">.</span><span class="n">person_size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">Person</span><span class="o">&amp;</span> <span class="n">person</span> <span class="o">=</span> <span class="n">address_book</span><span class="p">.</span><span class="n">person</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Person ID: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">person</span><span class="p">.</span><span class="n">id</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  Name: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">person</span><span class="p">.</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">has_email</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  E-mail address: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">person</span><span class="p">.</span><span class="n">email</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">person</span><span class="p">.</span><span class="n">phone_size</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">const</span> <span class="n">Person</span><span class="o">::</span><span class="n">PhoneNumber</span><span class="o">&amp;</span> <span class="n">phone_number</span> <span class="o">=</span> <span class="n">person</span><span class="p">.</span><span class="n">phone</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="n">phone_number</span><span class="p">.</span><span class="n">type</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">Person</span><span class="o">::</span><span class="nl">MOBILE:</span>
</span><span class='line'>                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  Mobile phone #: &quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">Person</span><span class="o">::</span><span class="nl">HOME:</span>
</span><span class='line'>                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  Home phone #: &quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">Person</span><span class="o">::</span><span class="nl">WORK:</span>
</span><span class='line'>                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;  Work phone #: &quot;</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">phone_number</span><span class="p">.</span><span class="n">number</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is the code that brings the other two snippets together, first we check for protobuf version using a special protobuf macro, then we store the protobuf binary into a string, then we parse this binary data into a completely new protobuf message, then we output the new message using the method defined above. Also it is good practice to call the ShutDownProtobufLibrary method once you have finished using protobuf code. Most applications probably will not have to do this since the program will terminate anyway once it has stopped using protobuf.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Verify that the version of the library that we linked against is</span>
</span><span class='line'><span class="c1">// compatible with the version of the headers we compiled against.</span>
</span><span class='line'><span class="n">GOOGLE_PROTOBUF_VERIFY_VERSION</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">createProtobuf</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">AddressBook</span> <span class="n">address_book</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">address_book</span><span class="p">.</span><span class="n">ParseFromString</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddresBook</span><span class="p">(</span><span class="n">address_book</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Optional:  Delete all global objects allocated by libprotobuf.</span>
</span><span class='line'><span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">ShutdownProtobufLibrary</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Msgpack C++ Example</h2>

<p>In c++ if the messages created from vectors, maps and PODs then msgpack will automatically covert data back into typed objects. Unfortunately for use with c++ if you require the message format as an array or map that contains different types then one must use helper functions to allow serialising of different types in the same message one after another (order will matter). Or you can create a class or struct in c++ that can hold these values, and then call the macro MSGPACK_DEFINE to tell msgpack what variables are going to be part of the serialisation, this can also be used to serialise custom classes.</p>

<p>The simple example of msgpack i.e. when you serialise just vectors, maps and PODs it can be performed very easily as can be seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- create the structure that will be serialised ----</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
</span><span class='line'><span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;World&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- serialize it into buffer ----</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">sbuffer</span> <span class="n">sbuf</span><span class="p">;</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">pack</span><span class="p">(</span><span class="n">sbuf</span><span class="p">,</span> <span class="n">vec</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- deserialize it ----</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">unpacked</span> <span class="n">msg</span><span class="p">;</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">unpack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="n">sbuf</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">sbuf</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- convert msgpack objects into statically typed object ----</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">rvec</span><span class="p">;</span>
</span><span class='line'><span class="n">obj</span><span class="p">.</span><span class="n">convert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rvec</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">vec</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">vec</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Msgpack provides a packer object that can pack multiple types into a single msgpack message. This requires a little more code, but it is still pretty easy to follow. Then it&rsquo;s pretty simple code to unpack the message using the unpacker object.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- create the structure that will be serialised ----</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>
</span><span class='line'><span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;World&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">map</span><span class="p">;</span>
</span><span class='line'><span class="n">map</span><span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- serialize it into buffer ----</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">sbuffer</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">packer</span><span class="o">&lt;</span><span class="n">msgpack</span><span class="o">::</span><span class="n">sbuffer</span><span class="o">&gt;</span> <span class="n">pk</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="n">pk</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">pk</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="n">vec</span><span class="p">);</span>
</span><span class='line'><span class="n">pk</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- de-serialise these objects using msgpack::unpacker ----</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">unpacker</span> <span class="n">pac</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// copy the buffer data to the unpacker object</span>
</span><span class='line'><span class="n">pac</span><span class="p">.</span><span class="n">reserve_buffer</span><span class="p">(</span><span class="n">buffer</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">pac</span><span class="p">.</span><span class="n">buffer</span><span class="p">(),</span> <span class="n">buffer</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">buffer</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'><span class="n">pac</span><span class="p">.</span><span class="n">buffer_consumed</span><span class="p">(</span><span class="n">buffer</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// deserialize it.</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">unpacked</span> <span class="n">msg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">outputString</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">outputVector</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">outputMap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- convert msgpack objects into statically typed objects ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// unpsck objects in the order in which they were packed</span>
</span><span class='line'><span class="n">pac</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'><span class="n">obj</span><span class="p">.</span><span class="n">convert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">outputString</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">outputString</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pac</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'><span class="n">obj</span><span class="p">.</span><span class="n">convert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">outputVector</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">outputVector</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">outputVector</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pac</span><span class="p">.</span><span class="n">next</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'><span class="n">obj</span><span class="p">.</span><span class="n">convert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">outputMap</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">outputMap</span><span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below we create a type &ldquo;Root&rdquo; that can hold different types of data, and which data is going to be serialised is defined by the MSGPACK_DEFINE macro. This could easily have been a struct with public variables instead.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// define custom msgpack serialisation for class</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Root</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ints_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">string_</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">getInts</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ints_</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getString</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">string_</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">Root</span><span class="p">(){};</span>
</span><span class='line'>    <span class="n">Root</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">ints</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">string</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ints_</span><span class="p">(</span><span class="n">ints</span><span class="p">),</span>
</span><span class='line'>        <span class="n">string_</span><span class="p">(</span><span class="n">string</span><span class="p">){};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// msgpack macro to define what to serialize in custom classes</span>
</span><span class='line'>    <span class="n">MSGPACK_DEFINE</span><span class="p">(</span><span class="n">ints_</span><span class="p">,</span> <span class="n">string_</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code to use the custom serialisation is very similar to the simple example above:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- create the structure that will be serialised ----</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ints</span><span class="p">;</span>
</span><span class='line'><span class="n">ints</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="n">ints</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Root</span> <span class="n">fromScratch</span><span class="p">(</span><span class="n">ints</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- serialize it into buffer ----</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">sbuffer</span> <span class="n">sbuf</span><span class="p">;</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">pack</span><span class="p">(</span><span class="n">sbuf</span><span class="p">,</span> <span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- deserialize it ----</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">unpacked</span> <span class="n">msg</span><span class="p">;</span>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">unpack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="n">sbuf</span><span class="p">.</span><span class="n">data</span><span class="p">(),</span> <span class="n">sbuf</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">msgpack</span><span class="o">::</span><span class="n">object</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- convert msgpack objects into statically typed object ----</span>
</span><span class='line'><span class="n">Root</span> <span class="n">world</span><span class="p">;</span>
</span><span class='line'><span class="n">obj</span><span class="p">.</span><span class="n">convert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">world</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">world</span><span class="p">.</span><span class="n">getInts</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">world</span><span class="p">.</span><span class="n">getInts</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">world</span><span class="p">.</span><span class="n">getString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>In the world of dynamic languages msgpack seems like a very good choice for use with messaging. I haven&rsquo;t gone through it here, but it can easily convert the dynamic languages standard containers (maps and arrays) into a msgpack binary message without too much problem, and in a really efficient way. The problem with the use of this library with static languages is that it requires hacks and quite a lot of boilerplate code to get around the static limitation that appear when message structure becomes more complicated.</p>

<p>I think c++ is where protobuf really shines. It provides a very simple api to a complicated problem as well as a list of interesting features such as default values, extensions and message validation and the only limitation is the fact that protobuf schemas (and the respective generated code) have to stay consistent wherever the messaging is used.</p>

<p>Saying that, if the message structure that you wish to send from the c++ program is a simple std::map or std::vector using PODs then I see no reason why to choose protobuf over msgpack.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xml C++ Examples]]></title>
    <link href="http://www.thomaswhitton.com/blog/2013/07/01/xml-c-plus-plus-examples/"/>
    <updated>2013-07-01T18:55:00+01:00</updated>
    <id>http://www.thomaswhitton.com/blog/2013/07/01/xml-c-plus-plus-examples</id>
    <content type="html"><![CDATA[<p>In each of the examples below I have used the address example from the previous article as an example xml file to be read in and parsed (as is common with xml, especially configuration files), create an xml message from scratch, query the xml message and also output as xml to a stream or file. I have separated out the querying into an outputAddress function that will be used throughout the example.</p>

<!-- more -->


<h3>Xsd</h3>

<ul>
<li>uses a data binding technique with generated code from an xsd schema file</li>
<li>a very small amount of code is required to effectively use the library</li>
<li>requires an xsd</li>
<li>uses generated code, which will need to be regenerated every time there is a schema change</li>
<li>simple to use</li>
<li>restrictive license</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- parse from file ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Address</span><span class="o">&gt;</span> <span class="n">parsedFromFile</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// read directly from file or uri</span>
</span><span class='line'>    <span class="n">parsedFromFile</span> <span class="o">=</span> <span class="n">Address_</span><span class="p">(</span><span class="s">&quot;address.xml&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">outputAddress</span><span class="p">(</span><span class="o">*</span><span class="n">parsedFromFile</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// all exceptions inherit from xml_schema::exception, can catch more specific if required</span>
</span><span class='line'><span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">xml_schema</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- create from scratch ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the constructor takes in the amount of required fields in the xsd as arguments</span>
</span><span class='line'><span class="n">Address</span> <span class="n">fromScratch</span><span class="p">(</span><span class="s">&quot;Mr. Malcolm Reynolds&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Serenity&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Space&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;DE18 5HI&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set values</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">County</span><span class="p">(</span><span class="s">&quot;Solar System&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">Country</span><span class="p">(</span><span class="s">&quot;UK&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- parse from stream ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">xml_schema</span><span class="o">::</span><span class="n">namespace_infomap</span> <span class="n">map</span><span class="p">;</span>
</span><span class='line'><span class="n">map</span><span class="p">[</span><span class="s">&quot;&quot;</span><span class="p">].</span><span class="n">schema</span> <span class="o">=</span> <span class="s">&quot;address.xsd&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Address_</span><span class="p">(</span><span class="n">ss</span><span class="p">,</span> <span class="n">fromScratch</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Address</span><span class="o">&gt;</span> <span class="n">parsedFromStream</span><span class="p">(</span><span class="n">Address_</span><span class="p">(</span><span class="n">ss</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddress</span><span class="p">(</span><span class="o">*</span><span class="n">parsedFromStream</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- output to file ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">ofs</span> <span class="p">(</span><span class="s">&quot;test.xml&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">Address_</span><span class="p">(</span><span class="n">ofs</span><span class="p">,</span> <span class="o">*</span><span class="n">parsedFromStream</span><span class="p">,</span> <span class="n">map</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">outputAddress</span><span class="p">(</span><span class="k">const</span> <span class="n">Address</span><span class="o">&amp;</span> <span class="n">address</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// output values using methods matching members in the xsd</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">Recipient</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">House</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">Street</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">Street</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">Country</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">PostCode</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Rapidxml</h3>

<ul>
<li>very fast</li>
<li>header only</li>
<li>verbose api, but usable</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- parse from file and stream ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// need to convert file and stream to cstring before parsing</span>
</span><span class='line'><span class="c1">// as rapidxml needs a null terminated cstring for parsing</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// file to string</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">fin</span><span class="p">(</span><span class="s">&quot;address.xml&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'><span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">fin</span><span class="p">.</span><span class="n">rdbuf</span><span class="p">();</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">xml</span> <span class="o">=</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string to dynamic cstring</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">stringCopy</span><span class="p">(</span><span class="n">xml</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="sc">&#39;\0&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">xml</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">xml</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">stringCopy</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">cstr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">stringCopy</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create xml document object and parse cstring</span>
</span><span class='line'><span class="c1">// character type defaults to char</span>
</span><span class='line'><span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_document</span><span class="o">&lt;&gt;</span> <span class="n">parsedFromFile</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 0 means default parse flags</span>
</span><span class='line'><span class="k">try</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">parsedFromFile</span><span class="p">.</span><span class="n">parse</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cstr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;</span> <span class="o">*</span><span class="n">addressNode</span> <span class="o">=</span> <span class="n">parsedFromFile</span><span class="p">.</span><span class="n">first_node</span><span class="p">(</span><span class="s">&quot;Address&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">outputAddress</span><span class="p">(</span><span class="o">*</span><span class="n">addressNode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print to stream using operator &lt;&lt;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">parsedFromFile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print to stream using print function, specifying printing flags</span>
</span><span class='line'>    <span class="c1">// 0 means default printing flags</span>
</span><span class='line'>    <span class="n">rapidxml</span><span class="o">::</span><span class="n">print</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">,</span> <span class="n">parsedFromFile</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">rapidxml</span><span class="o">::</span><span class="n">parse_error</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Parse error due to &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- create from scratch ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;</span> <span class="o">*</span><span class="n">addressNode</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fromScratch</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span> <span class="s">&quot;Address&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;</span> <span class="o">*</span><span class="n">recipientNode</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fromScratch</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span> <span class="s">&quot;Recipient&quot;</span><span class="p">,</span> <span class="s">&quot;Mr Malcolm Reynolds&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;</span> <span class="o">*</span><span class="n">houseNode</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fromScratch</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span> <span class="s">&quot;House&quot;</span><span class="p">,</span> <span class="s">&quot;3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;</span> <span class="o">*</span><span class="n">streetNode</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fromScratch</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span> <span class="s">&quot;Street&quot;</span><span class="p">,</span> <span class="s">&quot;Serenity&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;</span> <span class="o">*</span><span class="n">townNode</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fromScratch</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span> <span class="s">&quot;Town&quot;</span><span class="p">,</span> <span class="s">&quot;Space&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;</span> <span class="o">*</span><span class="n">postCodeNode</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">fromScratch</span><span class="p">.</span><span class="n">allocate_node</span><span class="p">(</span><span class="n">rapidxml</span><span class="o">::</span><span class="n">node_element</span><span class="p">,</span> <span class="s">&quot;PostCode&quot;</span><span class="p">,</span> <span class="s">&quot;DE18 5HI&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_document</span><span class="o">&lt;&gt;</span> <span class="n">fromScratch</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">addressNode</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">recipientNode</span><span class="p">);</span>
</span><span class='line'><span class="n">addressNode</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">houseNode</span><span class="p">);</span>
</span><span class='line'><span class="n">addressNode</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">streetNode</span><span class="p">);</span>
</span><span class='line'><span class="n">addressNode</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">townNode</span><span class="p">);</span>
</span><span class='line'><span class="n">addressNode</span><span class="o">-&gt;</span><span class="n">append_node</span><span class="p">(</span><span class="n">postCodeNode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">append_node</span><span class="p">(</span><span class="n">addressNode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddress</span><span class="p">(</span><span class="o">*</span><span class="n">addressNode</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- output to file ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">fout</span><span class="p">(</span><span class="s">&quot;test.xml&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fout</span> <span class="o">&lt;&lt;</span> <span class="n">fromScratch</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">outputAddress</span><span class="p">(</span><span class="k">const</span> <span class="n">rapidxml</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&lt;&gt;</span> <span class="o">&amp;</span><span class="n">addressNode</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">addressNode</span><span class="p">.</span><span class="n">first_node</span><span class="p">(</span><span class="s">&quot;Recipient&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">addressNode</span><span class="p">.</span><span class="n">first_node</span><span class="p">(</span><span class="s">&quot;House&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">addressNode</span><span class="p">.</span><span class="n">first_node</span><span class="p">(</span><span class="s">&quot;Street&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">addressNode</span><span class="p">.</span><span class="n">first_node</span><span class="p">(</span><span class="s">&quot;Town&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">addressNode</span><span class="p">.</span><span class="n">first_node</span><span class="p">(</span><span class="s">&quot;PostCode&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">addressNode</span><span class="p">.</span><span class="n">first_node</span><span class="p">(</span><span class="s">&quot;Country&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tinyxml</h3>

<ul>
<li>a lot of tiny memory allocations, so can be rather slow</li>
<li>simple api for simple tasks, otherwise seems quite complicated</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- parse from file ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">TiXmlDocument</span> <span class="n">parsedFromFile</span><span class="p">(</span> <span class="s">&quot;address.xml&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">parsedFromFile</span><span class="p">.</span><span class="n">LoadFile</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddress</span><span class="p">(</span><span class="n">parsedFromFile</span><span class="p">.</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;Address&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ToElement</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- create from scratch ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">TiXmlDocument</span> <span class="o">*</span> <span class="n">fromScratch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TiXmlDocument</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">TiXmlElement</span> <span class="o">*</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span> <span class="s">&quot;Address&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">TiXmlElement</span> <span class="o">*</span> <span class="n">recipient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span> <span class="s">&quot;Recipient&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// LlinkEndChild causes memory managed object to be owned by the parent object</span>
</span><span class='line'><span class="c1">// and destroyed by the parent when destroyed</span>
</span><span class='line'><span class="n">recipient</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;Mr. Malcolm Reynolds&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">address</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">recipient</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">TiXmlElement</span> <span class="o">*</span> <span class="n">house</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span> <span class="s">&quot;House&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">house</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">address</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">house</span><span class="p">);</span>
</span><span class='line'><span class="n">TiXmlElement</span> <span class="o">*</span> <span class="n">street</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span> <span class="s">&quot;Street&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">street</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;Serenity&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">address</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">street</span><span class="p">);</span>
</span><span class='line'><span class="n">TiXmlElement</span> <span class="o">*</span> <span class="n">town</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span> <span class="s">&quot;Town&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">town</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;Space&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">address</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">town</span><span class="p">);</span>
</span><span class='line'><span class="n">TiXmlElement</span> <span class="o">*</span> <span class="n">postCode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span> <span class="s">&quot;PostCode&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">postCode</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;DE18 5HI&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">address</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">postCode</span><span class="p">);</span>
</span><span class='line'><span class="n">TiXmlElement</span> <span class="o">*</span> <span class="n">country</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TiXmlElement</span><span class="p">(</span> <span class="s">&quot;Country&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="n">country</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="k">new</span> <span class="n">TiXmlText</span><span class="p">(</span><span class="s">&quot;UK&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">address</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span><span class="n">country</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">fromScratch</span><span class="o">-&gt;</span><span class="n">LinkEndChild</span><span class="p">(</span> <span class="n">address</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddress</span><span class="p">(</span><span class="n">fromScratch</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;Address&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ToElement</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- parse from string ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'><span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">fromScratch</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">TiXmlDocument</span> <span class="n">parsedFromString</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">parsedFromString</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddress</span><span class="p">(</span><span class="n">parsedFromString</span><span class="p">.</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;Address&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ToElement</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- output to file ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">parsedFromString</span><span class="p">.</span><span class="n">SaveFile</span><span class="p">(</span><span class="s">&quot;test.xml&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// destroying everything above that has been dynaimcally allocated by</span>
</span><span class='line'><span class="c1">// destorying the root node</span>
</span><span class='line'><span class="k">delete</span> <span class="n">fromScratch</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">outputAddress</span><span class="p">(</span><span class="k">const</span> <span class="n">TiXmlElement</span> <span class="o">*</span> <span class="n">address</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;Recipient&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FirstChild</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">()</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;House&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FirstChild</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">()</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;Street&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FirstChild</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">()</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;Town&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FirstChild</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">()</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;PostCode&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FirstChild</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">()</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="o">-&gt;</span><span class="n">FirstChildElement</span><span class="p">(</span><span class="s">&quot;Country&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FirstChild</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Value</span><span class="p">()</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pugixml</h3>

<ul>
<li>very simple api</li>
<li>reasonably fast</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- parse from file ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">pugi</span><span class="o">::</span><span class="n">xml_document</span> <span class="n">parsedFromFile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pugi</span><span class="o">::</span><span class="n">xml_parse_result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">parsedFromFile</span><span class="p">.</span><span class="n">load_file</span><span class="p">(</span><span class="s">&quot;address.xml&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">outputAddress</span><span class="p">(</span><span class="n">parsedFromFile</span><span class="p">.</span><span class="n">child</span><span class="p">(</span><span class="s">&quot;Address&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- create from scratch ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">pugi</span><span class="o">::</span><span class="n">xml_document</span> <span class="n">fromScratch</span><span class="p">;</span>
</span><span class='line'><span class="n">pugi</span><span class="o">::</span><span class="n">xml_node</span> <span class="n">address</span> <span class="o">=</span> <span class="n">fromScratch</span><span class="p">.</span><span class="n">append_child</span><span class="p">(</span><span class="s">&quot;Address&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">append_child</span><span class="p">(</span><span class="s">&quot;Recipient&quot;</span><span class="p">).</span><span class="n">append_child</span><span class="p">(</span><span class="n">pugi</span><span class="o">::</span><span class="n">node_pcdata</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;Mr. Malcolm Reynolds&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">append_child</span><span class="p">(</span><span class="s">&quot;House&quot;</span><span class="p">).</span><span class="n">append_child</span><span class="p">(</span><span class="n">pugi</span><span class="o">::</span><span class="n">node_pcdata</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">append_child</span><span class="p">(</span><span class="s">&quot;Street&quot;</span><span class="p">).</span><span class="n">append_child</span><span class="p">(</span><span class="n">pugi</span><span class="o">::</span><span class="n">node_pcdata</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;Serenity&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">append_child</span><span class="p">(</span><span class="s">&quot;Town&quot;</span><span class="p">).</span><span class="n">append_child</span><span class="p">(</span><span class="n">pugi</span><span class="o">::</span><span class="n">node_pcdata</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;Space&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">append_child</span><span class="p">(</span><span class="s">&quot;PostCode&quot;</span><span class="p">).</span><span class="n">append_child</span><span class="p">(</span><span class="n">pugi</span><span class="o">::</span><span class="n">node_pcdata</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;DE18 5HI&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">append_child</span><span class="p">(</span><span class="s">&quot;County&quot;</span><span class="p">).</span><span class="n">append_child</span><span class="p">(</span><span class="n">pugi</span><span class="o">::</span><span class="n">node_pcdata</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;Solar System&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">append_child</span><span class="p">(</span><span class="s">&quot;Country&quot;</span><span class="p">).</span><span class="n">append_child</span><span class="p">(</span><span class="n">pugi</span><span class="o">::</span><span class="n">node_pcdata</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;UK&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddress</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- parse from stream ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// output document as xml to stream</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">ss</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">pugi</span><span class="o">::</span><span class="n">xml_document</span> <span class="n">parsedFromStream</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pugi</span><span class="o">::</span><span class="n">xml_parse_result</span> <span class="n">streamResult</span> <span class="o">=</span> <span class="n">parsedFromStream</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">ss</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">streamResult</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">outputAddress</span><span class="p">(</span><span class="n">parsedFromStream</span><span class="p">.</span><span class="n">child</span><span class="p">(</span><span class="s">&quot;Address&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ---- output to file ----</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">ofs</span> <span class="p">(</span><span class="s">&quot;test.xml&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">parsedFromStream</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">ofs</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">outputAddress</span><span class="p">(</span><span class="k">const</span> <span class="n">pugi</span><span class="o">::</span><span class="n">xml_node</span><span class="o">&amp;</span> <span class="n">address</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">child_value</span><span class="p">(</span><span class="s">&quot;Recipient&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">child_value</span><span class="p">(</span><span class="s">&quot;House&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">child_value</span><span class="p">(</span><span class="s">&quot;Street&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">child_value</span><span class="p">(</span><span class="s">&quot;Town&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">child_value</span><span class="p">(</span><span class="s">&quot;PostCode&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">address</span><span class="p">.</span><span class="n">child_value</span><span class="p">(</span><span class="s">&quot;Country&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Boost Property Tree</h3>

<ul>
<li>header only</li>
<li>comes packaged with boost</li>
<li>uses rapidxml to parse xml</li>
<li>simple to use api</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- parse from file ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// every elelment is a ptree</span>
</span><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="o">::</span><span class="n">ptree</span> <span class="n">parsedFromFile</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// use trim whitespace to remove any whitespace</span>
</span><span class='line'>    <span class="c1">// due to pretty formatting of xml structure</span>
</span><span class='line'>    <span class="n">read_xml</span><span class="p">(</span><span class="s">&quot;address.xml&quot;</span><span class="p">,</span> <span class="n">parsedFromFile</span><span class="p">,</span>
</span><span class='line'>        <span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="o">::</span><span class="n">xml_parser</span><span class="o">::</span><span class="n">trim_whitespace</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">outputAddress</span><span class="p">(</span><span class="n">parsedFromFile</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="o">::</span><span class="n">xml_parser</span><span class="o">::</span><span class="n">xml_parser_error</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Could not parse file due to &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- create from scratch ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="o">::</span><span class="n">ptree</span> <span class="n">fromScratch</span><span class="p">;</span>
</span><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="o">::</span><span class="n">ptree</span> <span class="n">address</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// replace put with add if element key is not guaranteed to be unique</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">&quot;Recipient&quot;</span><span class="p">,</span> <span class="s">&quot;Mr. Malcolm Reynolds&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">&quot;House&quot;</span><span class="p">,</span> <span class="s">&quot;3&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">&quot;Street&quot;</span><span class="p">,</span> <span class="s">&quot;Serenity&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">&quot;Town&quot;</span><span class="p">,</span> <span class="s">&quot;Space&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">&quot;PostCode&quot;</span><span class="p">,</span> <span class="s">&quot;DE18 5HI&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">&quot;County&quot;</span><span class="p">,</span> <span class="s">&quot;Solar System&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">address</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">&quot;Country&quot;</span><span class="p">,</span> <span class="s">&quot;UK&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">put_child</span><span class="p">(</span><span class="s">&quot;Address&quot;</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddress</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- parse from stream ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// write and read methods can take paths to filenames and streams as parameters</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'><span class="n">write_xml</span><span class="p">(</span><span class="n">ss</span><span class="p">,</span> <span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="o">::</span><span class="n">ptree</span> <span class="n">parsedFromStream</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">read_xml</span><span class="p">(</span><span class="n">ss</span><span class="p">,</span> <span class="n">parsedFromStream</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">outputAddress</span><span class="p">(</span><span class="n">parsedFromStream</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- output to file ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">fout</span><span class="p">(</span><span class="s">&quot;test.xml&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">write_xml</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span> <span class="n">parsedFromStream</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">outputAddress</span><span class="p">(</span><span class="k">const</span> <span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="o">::</span><span class="n">ptree</span> <span class="o">&amp;</span><span class="n">pt</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// can use dotted notation to specify element path</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">pt</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;Address.Recipient&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">pt</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;Address.House&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">pt</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;Address.Street&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">pt</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;Address.Town&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">pt</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;Address.PostCode&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">pt</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;Address.Country&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="o">::</span><span class="n">ptree_bad_path</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I think the choice is very much dependent on what your use case is. If you have an xsd and it is small enough to allow free use of the xsd library (under the terms of their license) then I think that it is a very attractive option to consider.</p>

<p>Alternatively pugixml has a very simple api and is relatively fast, and so is an obvious choice, especially if there is a package available on your distribution that you can link against.</p>

<p>If you are looking for super fast encoding/decoding of xml then your two options are rapidxml and boost property tree. The boost library uses rapidxml to parse xml and therefore should be very comparable in speed. The good thing about boost is the fact that it allows a convenient package management solution for a header only library and boost is a very common requirement for a lot of projects, so in most cases you will already have access to the xml library, as well as slightly improving the rapidxml api.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Json C++ Examples]]></title>
    <link href="http://www.thomaswhitton.com/blog/2013/06/28/json-c-plus-plus-examples/"/>
    <updated>2013-06-28T19:54:00+01:00</updated>
    <id>http://www.thomaswhitton.com/blog/2013/06/28/json-c-plus-plus-examples</id>
    <content type="html"><![CDATA[<p>In each of the examples below I have tried to show you most of the different aspects of using json, i.e. creating json messages from scratch, outputting json, parsing json and querying json objects. The example json message used contains most of the features that a json message could contain. Querying the json object has been extracted into an output function which is used multiple times in each example to show that everything is working correctly.</p>

<!-- more -->


<h3>jsoncpp</h3>

<ul>
<li>mature</li>
<li>feature complete</li>
<li>c++ interface</li>
<li>very simple api</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- create from scratch ----</span>
</span><span class='line'>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">Value</span> <span class="n">fromScratch</span><span class="p">;</span>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">Value</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">[</span><span class="s">&quot;number&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">[</span><span class="s">&quot;array&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">[</span><span class="s">&quot;object&quot;</span><span class="p">][</span><span class="s">&quot;hello&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// write in a nice readible way</span>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">StyledWriter</span> <span class="n">styledWriter</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">styledWriter</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- parse from string ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// write in a compact way</span>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">FastWriter</span> <span class="n">fastWriter</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">jsonMessage</span> <span class="o">=</span> <span class="n">fastWriter</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">Value</span> <span class="n">parsedFromString</span><span class="p">;</span>
</span><span class='line'><span class="n">Json</span><span class="o">::</span><span class="n">Reader</span> <span class="n">reader</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">parsingSuccessful</span> <span class="o">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="n">jsonMessage</span><span class="p">,</span> <span class="n">parsedFromString</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">parsingSuccessful</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">styledWriter</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">parsedFromString</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">output</span><span class="p">(</span><span class="k">const</span> <span class="n">Json</span><span class="o">::</span><span class="n">Value</span> <span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// querying the json object is very simple</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">[</span><span class="s">&quot;number&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">[</span><span class="s">&quot;array&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">[</span><span class="s">&quot;array&quot;</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">[</span><span class="s">&quot;object&quot;</span><span class="p">][</span><span class="s">&quot;hello&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>rapidjson</h3>

<ul>
<li>header only</li>
<li>very fast</li>
<li>c++ interface</li>
<li>verbose api</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- create from scratch ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// document is the root of a json message</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Document</span> <span class="n">fromScratch</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define the document as an object rather than an array</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">SetObject</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create a rapidjson array type with similar syntax to std::vector</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span> <span class="n">array</span><span class="p">(</span><span class="n">rapidjson</span><span class="o">::</span><span class="n">kArrayType</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// must pass an allocator when the object may need to allocate memory</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Document</span><span class="o">::</span><span class="n">AllocatorType</span><span class="o">&amp;</span> <span class="n">allocator</span> <span class="o">=</span> <span class="n">fromScratch</span><span class="p">.</span><span class="n">GetAllocator</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// chain methods as rapidjson provides a fluent interface when modifying its objects</span>
</span><span class='line'><span class="n">array</span><span class="p">.</span><span class="n">PushBack</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="n">allocator</span><span class="p">).</span><span class="n">PushBack</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="n">allocator</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="n">allocator</span><span class="p">);</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;number&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">allocator</span><span class="p">);</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;array&quot;</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="n">allocator</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create a rapidjson object type</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Value</span> <span class="n">object</span><span class="p">(</span><span class="n">rapidjson</span><span class="o">::</span><span class="n">kObjectType</span><span class="p">);</span>
</span><span class='line'><span class="n">object</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="n">allocator</span><span class="p">);</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">AddMember</span><span class="p">(</span><span class="s">&quot;object&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">,</span> <span class="n">allocator</span><span class="p">);</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">[</span><span class="s">&quot;object&quot;</span><span class="p">][</span><span class="s">&quot;hello&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- parse from string ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Convert JSON document to string</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">StringBuffer</span> <span class="n">strbuf</span><span class="p">;</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Writer</span><span class="o">&lt;</span><span class="n">rapidjson</span><span class="o">::</span><span class="n">StringBuffer</span><span class="o">&gt;</span> <span class="n">writer</span><span class="p">(</span><span class="n">strbuf</span><span class="p">);</span>
</span><span class='line'><span class="n">fromScratch</span><span class="p">.</span><span class="n">Accept</span><span class="p">(</span><span class="n">writer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// parse json string</span>
</span><span class='line'><span class="n">rapidjson</span><span class="o">::</span><span class="n">Document</span> <span class="n">parsedFromString</span><span class="p">;</span>
</span><span class='line'><span class="n">parsedFromString</span><span class="p">.</span><span class="n">Parse</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">strbuf</span><span class="p">.</span><span class="n">GetString</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span><span class="p">(</span><span class="n">parsedFromString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">output</span><span class="p">(</span><span class="k">const</span> <span class="n">rapidjson</span><span class="o">::</span><span class="n">Document</span> <span class="o">&amp;</span> <span class="n">document</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// treat object types similar to std::map when querying</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;hello&quot;</span><span class="p">].</span><span class="n">GetString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;number&quot;</span><span class="p">].</span><span class="n">GetInt</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// requires SizeType since the literal zero in c++ can mean a</span>
</span><span class='line'>    <span class="c1">// numeric type (int, unsigned, etc.) or a null pointer of any type</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;array&quot;</span><span class="p">][</span><span class="n">rapidjson</span><span class="o">::</span><span class="n">SizeType</span><span class="p">(</span><span class="mi">0</span><span class="p">)].</span><span class="n">GetString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;array&quot;</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="n">GetString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">document</span><span class="p">[</span><span class="s">&quot;object&quot;</span><span class="p">][</span><span class="s">&quot;hello&quot;</span><span class="p">].</span><span class="n">GetString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>jansson</h3>

<ul>
<li>mature</li>
<li>simple c interface</li>
<li>nasty memory allocation mainly due to it being a c library</li>
<li>every json item is a json_t pointer, which must be checked to see what type it is before being used</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// ---- create from scratch ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create json &quot;objects&quot; and use the json_t pointer to point to them</span>
</span><span class='line'><span class="n">json_t</span> <span class="o">*</span><span class="n">fromScratch</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'><span class="n">json_t</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="n">json_array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use the new version of the method to aboud have to call json_decref on each json object</span>
</span><span class='line'><span class="c1">// must encompass values in their respective methods</span>
</span><span class='line'><span class="n">json_array_append_new</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">json_string</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">json_array_append_new</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">json_string</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">json_object_set_new</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="n">json_string</span><span class="p">(</span><span class="s">&quot;world&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">json_object_set_new</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">,</span> <span class="s">&quot;number&quot;</span><span class="p">,</span> <span class="n">json_integer</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'><span class="n">json_object_set_new</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">,</span> <span class="s">&quot;array&quot;</span><span class="p">,</span> <span class="n">array</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// json pack provies an easy to use api to create json structures using a</span>
</span><span class='line'><span class="c1">// special string syntax as the first argument</span>
</span><span class='line'><span class="n">json_object_set_new</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">,</span> <span class="s">&quot;object&quot;</span><span class="p">,</span> <span class="n">json_pack</span><span class="p">(</span><span class="s">&quot;{ss}&quot;</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="s">&quot;world&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ---- parse from string ----</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use json_dumps to output raw json from the json &quot;objects&quot;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">jsonOutput</span> <span class="o">=</span> <span class="n">json_dumps</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// can use special flags to make the json more human readible</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">json_dumps</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">,</span> <span class="n">JSON_INDENT</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">json_error_t</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// parse the json and</span>
</span><span class='line'><span class="n">json_t</span> <span class="o">*</span><span class="n">parsedFromString</span> <span class="o">=</span> <span class="n">json_loads</span><span class="p">(</span><span class="n">jsonOutput</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// memory management for the json &quot;objects&quot;</span>
</span><span class='line'><span class="n">free</span><span class="p">(</span><span class="n">jsonOutput</span><span class="p">);</span>
</span><span class='line'><span class="n">json_decref</span><span class="p">(</span><span class="n">fromScratch</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">parsedFromString</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">output</span><span class="p">(</span><span class="n">parsedFromString</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">text</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">json_decref</span><span class="p">(</span><span class="n">parsedFromString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">output</span><span class="p">(</span><span class="k">const</span> <span class="n">json_t</span><span class="o">*</span> <span class="n">document</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// lots of checking to see if json_t is of the right type</span>
</span><span class='line'>    <span class="c1">// since it is just a json_t pointer</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">json_is_object</span><span class="p">(</span><span class="n">document</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">json_t</span><span class="o">*</span> <span class="n">string</span> <span class="o">=</span> <span class="n">json_object_get</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">json_is_string</span><span class="p">(</span><span class="n">string</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">json_string_value</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">json_t</span><span class="o">*</span> <span class="n">number</span> <span class="o">=</span> <span class="n">json_object_get</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="s">&quot;number&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">json_is_integer</span><span class="p">(</span><span class="n">number</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">json_integer_value</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">json_t</span><span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="n">json_object_get</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="s">&quot;array&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">json_is_array</span><span class="p">(</span><span class="n">array</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">json_t</span><span class="o">*</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">json_array_get</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">json_is_string</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">json_string_value</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">json_array_get</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">json_is_string</span><span class="p">(</span><span class="n">index</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">json_string_value</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">json_t</span><span class="o">*</span> <span class="n">object</span> <span class="o">=</span> <span class="n">json_object_get</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="s">&quot;object&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">json_is_object</span><span class="p">(</span><span class="n">object</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">json_t</span><span class="o">*</span> <span class="n">objectString</span> <span class="o">=</span> <span class="n">json_object_get</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">json_is_string</span><span class="p">(</span><span class="n">objectString</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">json_string_value</span><span class="p">(</span><span class="n">objectString</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conslusion</h2>

<p>I think the choice is very much dependent on what your use case is. If you would like a very simple api and do not rely too heavily on being super fast then the obvious choice is jsoncpp, especially if there is a package available on your distribution that you can link against. If you require super fast json encoding and decoding or are working on a system where a header-only library is an attractive option then choose rapidjson. Since we&rsquo;re talking about c++ here, I don&rsquo;t think there should be a situation in which you should choose jansson over the others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Messaging Formats]]></title>
    <link href="http://www.thomaswhitton.com/blog/2013/06/26/messaging-formats/"/>
    <updated>2013-06-26T15:42:00+01:00</updated>
    <id>http://www.thomaswhitton.com/blog/2013/06/26/messaging-formats</id>
    <content type="html"><![CDATA[<p>With ever increasing data volumes being transfered in networks around the world, the type data formats used to pass information around has obviously been a heavily discussed topic. It usually comes down to three main factors: data compression, speed of encoding/decoding and how easy it is to read and debug. In this post I am going to talk about some of the most commonly used message formats; their advantages and disadvantages, including my opinions, and links to some other blog posts with examples of using them with c++.</p>

<!-- more -->


<h2>Text Formats</h2>

<p>Lets first of all split these messaging formats up into two subcategories. First of all we have human readable format. These have the advantage that it&rsquo;s very easy to debug and understand what is being sent over the wire, although obviously the size of data is quite a bit larger than it needs to be. The obvious contenders here are Json, XML and YAML. Json seems to be the most used as it is very dynamic, simple and works really well with javascript where a lot of restful web services are used. XML used the be the most popular and is still very popular, but it is slightly more complicated to use than json. I&rsquo;ll only discuss json and xml below as I think these are the most widely used text based messaging formats and there are quite a few competing c++ libraries for each.</p>

<h3>Json</h3>

<p><a href="http://www.thomaswhitton.com/blog/2013/06/27/json-c-plus-plus-examples/">Json C++ Examples</a></p>

<p>Json is simply made up of a combination of of arrays and objects (aka dictionaries or maps depending on you programming affiliation), using javascript syntax, where the object keys are strings, and the items in the array and objects values can be arrays, objects, strings, numbers, booleans or null. This is an example of the json format:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;hello&quot;</span><span class="p">:</span> <span class="s2">&quot;world&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;array&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;world&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;number&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;object&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;hello&quot;</span><span class="p">:</span> <span class="s2">&quot;world&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Xml</h3>

<p><a href="http://www.thomaswhitton.com/blog/2013/06/28/xml-c-plus-plus-examples/">Xml C++ Examples</a></p>

<p>Xml is made up of a hierarchy of tags and values. Each tag may also have its own properties. Xml is a very mature message structure and as such it has a few very well defined schema definition languages that can be used to make sure xml files conform to a certain structure, with the most popular being the Xml Schema Definition (xsd). An example of an xsd is below, and it will be used in one of our examples that uses the xsd to generate code to encode and decode to and from xml.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;xs:schema</span> <span class="na">elementFormDefault=</span><span class="s">&quot;qualified&quot;</span> <span class="na">xmlns:xs=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;Address&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xs:complexType&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xs:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;Recipient&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;House&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;Street&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;Town&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;County&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;PostCode&quot;</span> <span class="na">type=</span><span class="s">&quot;xs:string&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xs:element</span> <span class="na">name=</span><span class="s">&quot;Country&quot;</span> <span class="na">minOccurs=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;xs:simpleType&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xs:restriction</span> <span class="na">base=</span><span class="s">&quot;xs:string&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;xs:enumeration</span> <span class="na">value=</span><span class="s">&quot;IN&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;xs:enumeration</span> <span class="na">value=</span><span class="s">&quot;DE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;xs:enumeration</span> <span class="na">value=</span><span class="s">&quot;ES&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;xs:enumeration</span> <span class="na">value=</span><span class="s">&quot;UK&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>              <span class="nt">&lt;xs:enumeration</span> <span class="na">value=</span><span class="s">&quot;US&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/xs:restriction&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/xs:simpleType&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/xs:sequence&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xs:complexType&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/xs:element&gt;</span>
</span><span class='line'><span class="nt">&lt;/xs:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With an example of an xml message conforming to the above schema being.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;Address</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>    <span class="na">xsi:noNamespaceSchemaLocation=</span><span class="s">&quot;address.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Recipient&gt;</span>Mr. Walter C. Brown<span class="nt">&lt;/Recipient&gt;</span>
</span><span class='line'>  <span class="nt">&lt;House&gt;</span>49<span class="nt">&lt;/House&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Street&gt;</span>Featherstone Street<span class="nt">&lt;/Street&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Town&gt;</span>LONDON<span class="nt">&lt;/Town&gt;</span>
</span><span class='line'>  <span class="nt">&lt;PostCode&gt;</span>EC1Y 8SY<span class="nt">&lt;/PostCode&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Country&gt;</span>UK<span class="nt">&lt;/Country&gt;</span>
</span><span class='line'><span class="nt">&lt;/Address&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Binary Formats</h2>

<p><a href="http://www.thomaswhitton.com/blog/2013/06/29/binary-message-format-c-plus-plus-examples/">Binary Message Format C++ Examples</a></p>

<p>Then we have non human-readable messaging. These use some sort of binary representation when going across the wire but need to be decoded and encoded either side. These have been given the name of &ldquo;protocol buffers&rdquo;. The two mainly used ones are Google&rsquo;s protobuf and msgpack. The advantages of these are that the payloads of data you need to send are a lot smaller compared with a human readable format. But then you lose the ability to understand (without computer interaction) what is being sent across the wire. You are also going to need a bit more time at each end to encode and decode, but protocol buffers are heavily optimised and should not take too long to encode/decode. Both of these formats have many bindings in multiple programming languages to allow you to communicate between any system you need. There seems to be a lot of debate currently about which is faster out of the two, and I suggest you profile the two for your specific needs and actually decide which to use taking into account your own profiling and the fundamental differences between the two libraries.</p>

<h2>Protobuf</h2>

<p>Protobuf requires a schema to keep data consistent and at least in c++ uses this schema to generate optimised code. This gives you methods, depending on the datatypes defined in the schema, to access and set any value you defined. You can not add any value into a protobuf message that is not defined in the schema nor one that has an incorrect type. An example of a schema taken from the protobuf documentation is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">message</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">required</span> <span class="n">int32</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">optional</span> <span class="n">string</span> <span class="n">email</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">enum</span> <span class="n">PhoneType</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">MOBILE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">HOME</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">WORK</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message</span> <span class="n">PhoneNumber</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">required</span> <span class="n">string</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">optional</span> <span class="n">PhoneType</span> <span class="n">type</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span><span class="k">default</span> <span class="o">=</span> <span class="n">HOME</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">PhoneNumber</span> <span class="n">phone</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="n">AddressBook</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">repeated</span> <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This defines an address book which stores a list of people and their phone numbers, specifying what type the number is.</p>

<h3>Protobuf Binary Format</h3>

<h4>Varints</h4>

<p>Protobuf heavily uses varints which are a way to represent numbers with a varying amount of memory. In the case of protobufs it does this by setting the first bit to 1 in every byte if there are further bytes to come. The other 7 bits of each byte are used to store the two&rsquo;s complement representation of the number in groups of 7 bits using the <strong>least significant group first</strong> i.e. you need to reverse the groups of 7 bits. Below is an example of working from the binary representation of a varint to a negative decimal number:</p>

<pre><code>1011 1000 0011 1100
</code></pre>

<p>First take off the first bit from each byte.</p>

<pre><code>011 1000 011 1100
</code></pre>

<p>Then reverse the byte order as the protocol defines that the least significant group comes first.</p>

<pre><code>111 1100 111 0000
</code></pre>

<p>Then finally convert the two&rsquo;s compliment binary number into a decimal.</p>

<pre><code>-400
</code></pre>

<h4>Message Structure</h4>

<p>Like with most messaging format a protocol buffer message is a series of key-value pairs. In the binary format the key is made up from the fields number from the .proto file and a number defining the field type. The use of the field number from the schema saves quite a lot of space, however, means that at each end there is a requirement for a .proto file referencing that field. The field type is needed so that protobuf can work out the length of the value so as to skip over any it does not recognise, i.e. to allow backwards compatibility of .proto files.</p>

<p>Each key in the binary message is a varint with the value:</p>

<pre><code>(field_number &lt;&lt; 3) | type
</code></pre>

<p>i.e. the last three bits of the number specify the type, these values are hard coded and defined in the protobuf documentation.</p>

<p>The possible value types are pretty much just a combination of varints, fixed-length values and length-delimited values. With length-delimited values (string, bytes, etc&hellip;) the following field is just a varint defining the length in bytes of the value and then the actual value.</p>

<h2>Msgpack</h2>

<p>Msgpack is very dynamic and bases itself on json except that at either end it encodes/decodes into a binary protocol. Even when you output it out inside the code it prints it out as if it were encoded in json. Since it allows any data to be added and removed it generally uses the language own containers (lists and maps) as the undecoded format. The problem with the use of this library with static languages is that it requires hacks and quite a lot of boilerplate code to get around the static limitation that appear when message structure becomes more complicated.</p>

<h2>Msgpack Binary Format</h2>

<p>Msgpack contains all type information inside the binary message and therefore is always backwards compatible. Each value is stored in a <strong>type-data</strong> or <strong>type-length-data</strong> style. Meaning that there are quite a few well defined types that have a hard coded fixed length value and others such as raw bytes and containers need to know the length of their values.</p>

<h2>Summary</h2>

<p>I think with the modern day responsive websites mostly utilising restful web api&rsquo;s that json is here to stay and xml will slowly fade away. Even xml configuration files (a very popular use of xml) are slowly moving to json equivalents.</p>

<p>I see no real reason to replace restful json api&rsquo;s with binary protocol buffers considering with json it is very quick to convert into javascript objects and since with gzipping the api response the size of json can be greatly reduced. However, in other multi-platform architectures, especially real-time systems or systems dealing with very large data volumes, I believe that there is tremendous value in using a binary representation across the wire.</p>

<p>Which binary representation to use depends heavily on the particular use case. But as my examples in c++ show. I strongly feel that using msgpack in a statically typed language greatly reduces the impressiveness of msgpack&rsquo;s dynamic features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scripting Packet Analysis]]></title>
    <link href="http://www.thomaswhitton.com/blog/2013/01/10/scripting-packet-analysis/"/>
    <updated>2013-01-10T22:16:00+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2013/01/10/scripting-packet-analysis</id>
    <content type="html"><![CDATA[<p>Working with networking applications can be quite hard to troubleshoot sometimes. Wireshark is an amazingly helpful tool to debug problems, however sometimes it just can&rsquo;t do exactly what you want it to do. Libraries are available in common scripting libraries such as Python and Ruby to quickly create scripts that can analyse network traffic in a specific way.</p>

<!-- more -->


<p>As well as troubleshooting problems, these libraries can be used to create useful tools useful in testing, helping developers in one of their most important goal: to automate everything.</p>

<p>Anyway here is the presentation <a href="http://www.thomaswhitton.com/scripting-packet-anaylsis-presentation">Scripting Packet Analysis and Modifcation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django by Example]]></title>
    <link href="http://www.thomaswhitton.com/blog/2012/10/25/django-by-example/"/>
    <updated>2012-10-25T21:50:00+01:00</updated>
    <id>http://www.thomaswhitton.com/blog/2012/10/25/django-by-example</id>
    <content type="html"><![CDATA[<p>I work in a development team that is very heavily invested in ruby on rails for their webapps and that&rsquo;s where most of the teams experience lies with web development. But being a python guy I was quite keen to show everyone some Django development. So I used my latest project <a href="http://www.repowatcher.com">repowatcher</a> as an example for some Django code, and hopefully get more people excited about Python and Django, plus it&rsquo;s always useful to see how abother language/framework does things differently.</p>

<!-- more -->


<p>Repowatcher is a site designed to easily track and organise repositories on github and bitbucket. I show some simple stuff in the presentation but the entire code base can be found <a href="https://github.com/oracal/repowatcher">here</a>.</p>

<p>I also had a go at using reveal.js for the first time to create my presentation. Anyway here is the presentation: <a href="http://www.thomaswhitton.com/django-presentation">Django by Example</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cineworld API]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/08/26/cineworld-api/"/>
    <updated>2011-08-26T22:19:42+01:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/08/26/cineworld-api</id>
    <content type="html"><![CDATA[<p>So after working on commercial software for a few years, I really fancied getting my feet wet in some open source software again, I haven&rsquo;t had too much time for this, but when I found out my favorite cinema had their own API I couldn&rsquo;t resist making a wrapper for it.</p>

<p>It only took a couple of hours but it was quite fun to make. I tried to make up for missing information supplied by the API by introducing some simple hacks to get the information a different way. I&rsquo;ll go through my methodology in this blog post as well as some simple use cases. So here it is the <a href="https://github.com/oracal/cineworld">Cineworld API Wrapper written in Python</a></p>

<!-- more -->


<p>First of there are two mode of operations regarding the API key, you can either store it in a file (which I suggest) or you can use it as an argument into the main class. Here is a simple search method for finding a film:</p>

<p>Without saving your API key in the cineworld_api_key.py file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">cineworld</span> <span class="kn">import</span> <span class="n">CW</span>
</span><span class='line'><span class="n">CW</span><span class="p">(</span><span class="s">&#39;my_api_key&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">film_search</span><span class="p">(</span><span class="s">&#39;some movie here&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With your API key saved:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">cineworld</span> <span class="kn">import</span> <span class="n">CW</span>
</span><span class='line'><span class="n">CW</span><span class="p">()</span><span class="o">.</span><span class="n">film_search</span><span class="p">(</span><span class="s">&#39;some movie here&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d like to mention that the cineworld API doesn&rsquo;t have a way to search using film titles so I had to make my own using their list of films. But before I get into explaining that I would like to go through some of the easy functions that just directly link to the API.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># base function for connecting to API</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_list</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">datatype</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="n">search_url</span> <span class="o">=</span> <span class="p">[</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;?&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">kwargs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&#39;key&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">api_key</span><span class="p">})</span>
</span><span class='line'>    <span class="n">search_url</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">urlencode</span><span class="p">(</span><span class="n">kwargs</span><span class="p">))</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_url</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="n">datatype</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># gets a list of all cineworld cinemas and allows further customization</span>
</span><span class='line'><span class="c"># of the list using arguments located in the API documentation</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_cinemas</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_list</span><span class="p">(</span><span class="s">&#39;cinemas&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">cinemas_url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># gets a list of all films currently playing in cineworld cinemas and allows</span>
</span><span class='line'><span class="c"># further customization of the list using arguments located in the API documentation</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_films</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_list</span><span class="p">(</span><span class="s">&#39;films&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">films_url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># cache the result of the list of films in case of</span>
</span><span class='line'><span class="c"># multiple searching on the same object</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_film_list</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">film_list</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_films</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">film_list</span>
</span><span class='line'>
</span><span class='line'><span class="c"># gets a list of all dates when films are playing at cineworld cinemas and allows</span>
</span><span class='line'><span class="c"># further customization of the list using arguments located in the API documentation</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_dates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_list</span><span class="p">(</span><span class="s">&#39;dates&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">dates_url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># not well documented but I assume it&#39;s for more specialized performances i.e. not films</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_performances</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_list</span><span class="p">(</span><span class="s">&#39;performances&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">performances_url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each function above accesses their respective API call and allows the user to specify their own arguments using the **kwargs parameter. These are the only functions to actually call the API and the rest of the functionality is completely based on these. A unique identifier can be passed along with the get_cinemas and get_films function to allow us to get specific film information.</p>

<p>Now the problem I have is how do I get specific films if a user wanted one, they would have to first call the get_films function and then manually pick out their film. The list returned from the films API does contain a unique identifier for each film called the EDI number. However, EDI numbers are not as popular as say imdb or the tmdb movie identification number. The only way to get the specific film information is to look at the name and extract its EDI number. The problem was that the name of the films could be slightly different from imdb or tmdb so I couldn&rsquo;t do an exact string match. They could be shortened versions of the film names or additional identifiers such as 3D appended onto the name.</p>

<p>So I pretty much had to implement my own search functionality using the film list generated by cineworld as the base information. Now performance wasn&rsquo;t really an issue as there were only at most about 20 films in the list, so I didn&rsquo;t need hardcore performance search indexers like Lucene and I could easily use python for my search.</p>

<p>What I needed was a fuzzy searching alogirthm, luckily I had just read a <a href="http://seatgeek.com/blog/dev/fuzzywuzzy-fuzzy-string-matching-in-python">seatgeek blog post</a> with a really great introductory tutorial on fuzzy searching. They aslo released the code they used as an opensource python library amazingly called <a href="https://github.com/seatgeek/fuzzywuzzy">fuzzywuzzy</a>. It provided me with an easy way to match a good representation a film title with the film name that cineworld would give me.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">fuzzywuzzy.fuzz</span> <span class="kn">import</span> <span class="n">WRatio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">film_search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>  <span class="n">films</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="c"># check for cache or update</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;film_list&#39;</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">get_film_list</span><span class="p">()</span>
</span><span class='line'>  <span class="c"># iterate over films and check for fuzzy string match</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">film</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">film_list</span><span class="p">:</span>
</span><span class='line'>      <span class="n">strength</span> <span class="o">=</span> <span class="n">WRatio</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">film</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">])</span>
</span><span class='line'>      <span class="k">if</span>  <span class="n">strength</span> <span class="o">&gt;</span> <span class="mi">80</span><span class="p">:</span>
</span><span class='line'>          <span class="n">film</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">u&#39;strength&#39;</span><span class="p">:</span><span class="n">strength</span><span class="p">})</span>
</span><span class='line'>          <span class="n">films</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">film</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># sort films by the strength of the fuzzy string match</span>
</span><span class='line'>  <span class="n">films_sorted</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">films</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">itemgetter</span><span class="p">(</span><span class="s">&#39;strength&#39;</span><span class="p">),</span> <span class="n">reverse</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">films_sorted</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this function will return a list of films ordered by the strength of the fuzzy string match, generally we will only need the top results, possible the second result when the string matches a film name with both its 2D and 3D version. So this is going to be the main function to get hold of a film&rsquo;s id and then use that to find show times etc.</p>

<p>I needed a way to get the current box office films to place on a site, unfortunately Cineworld have quite a few unorthodox films that play sometimes, like kids cartoons on Saturday morning and Bollywood films on a Thursday. Not that those films aren&rsquo;t important but I wouldn&rsquo;t say they were really Box Office films. Wednesday on the other hand, being Orange Wednesdays, generally had all of the Box Office films playing. Also, the way the Cineworld site seemed to work was that looking forward to Wednesday was a good way to get the most up to date films. So I made a function that would look forward to the next Wednesday and return a list of films playing that night. Also, I picked a single cinema which was likely to have quite a large amount of films due to its size, the O2 in Greenwich. Finally I made sure that I wouldn&rsquo;t get both the 3D and the 2D version of the film and it would only return the film name once using a simple filter to remove any 3D films and then removing the 2D text at the beginning of the string.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># uses a certain cinema (O2) and a certain day when non specialist films</span>
</span><span class='line'><span class="c"># show (Wednesday) to get a list of the latest box office films</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_box_office_films</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="n">today</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'>  <span class="n">next_wednesday</span> <span class="o">=</span> <span class="p">(</span><span class="n">today</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">((</span><span class="mi">2</span> <span class="o">-</span> <span class="n">today</span><span class="o">.</span><span class="n">weekday</span><span class="p">())</span> <span class="o">%</span> <span class="mi">7</span><span class="p">))</span>
</span><span class='line'>  <span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y%m</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">films</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_films</span><span class="p">(</span><span class="n">cinema</span><span class="o">=</span><span class="mi">79</span><span class="p">,</span> <span class="n">date</span> <span class="o">=</span> <span class="n">next_wednesday</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">films</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s">&#39;3D&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">],</span> <span class="n">films</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">film</span> <span class="ow">in</span> <span class="n">films</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="s">&#39;2D -&#39;</span> <span class="ow">in</span> <span class="n">film</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]:</span>
</span><span class='line'>          <span class="n">film</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span><span class="o">=</span><span class="n">film</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">][</span><span class="mi">5</span><span class="p">:]</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">films</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s pretty easy to see that using quite a basic API you can create a lot more functionality with only making the slightest of approximations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python GUI Programming]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/03/06/python-gui-programming/"/>
    <updated>2011-03-06T21:28:00+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/03/06/python-gui-programming</id>
    <content type="html"><![CDATA[<p>There are many options for GUI programming with Python. I&rsquo;ll go over my favorite, and generally most well known frameworks and show you some simple programs with each one. In fact these aren&rsquo;t really Python frameworks but actually Python bindings for already established c/c++ libraries. So the three options are PyQt/PySide, wxPython  and PyGTK with their respective c++ frameworks Qt, wxWidgets and GTK+. I&rsquo;ll go over the differences of PyQt and PySide, I mention both since PyQt is more mature than PySide but has a more restrictive license, also PySide has just moved out of beta with its version 1 release, and according to its creators, the company behind the original Qt, it is ready for production level code.</p>

<!-- more -->


<p>The GUI program we&rsquo;ll make is a simple single button example that changes the color of a square rectangle. In each of the frameworks this will show its basic syntax, its widget creation and show its widget interconnectivity. Three of the most important aspects in using a GUI framework, especially widget connectivity.</p>

<h2>PyQt</h2>

<p>When I first started looking at Python GUI frameworks I of course had already heard about PyQt from my extensive work with Qt using c++. If I ever found a solution online for a Qt problem using PyQt it was easily transferable to the c++ world. Now PyQt is the more mature set of bindings for Qt and therefore is generally a good choice if one already knows Qt, however it only has a GPL license which means you need to purchase a license to sell on the program when using PyQt. In contrast to PySide (which we shall discuss later) which has a LGPL license when can be used in a commercial application without license.</p>

<p>Now getting past the licensing issues, PyQt is extremely easy to work with and contains most of the functionality of the original Qt. I&rsquo;m just going to show and explain an example bit of code that will get you used to the PyQt syntax and show some widget connectivity, which you should be able to adapt to any already implemented Qt widgets.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtCore</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtGui</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Form</span><span class="p">(</span><span class="n">QDialog</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">(</span><span class="n">Form</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>      <span class="n">button</span><span class="o">=</span><span class="n">QPushButton</span><span class="p">(</span><span class="s">&quot;Change Color&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">=</span><span class="n">QLabel</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">red</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'>      <span class="n">layout</span> <span class="o">=</span> <span class="n">QHBoxLayout</span><span class="p">()</span>
</span><span class='line'>      <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s">&quot;Color Changer&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">button</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="s">&quot;clicked()&quot;</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">change</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">Form</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll go over each section of code to explain it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtCore</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtGui</span> <span class="kn">import</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>This bit of code simply imports the modules needed for the Qt framework.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Form</span><span class="p">(</span><span class="n">QDialog</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">(</span><span class="n">Form</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This section of code creates our own widget that inherits the QDialog class and then defines the contructor which in turn calls the QDialog constructor.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">button</span><span class="o">=</span><span class="n">QPushButton</span><span class="p">(</span><span class="s">&quot;Change Color&quot;</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">=</span><span class="n">QLabel</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'><span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">red</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s">&quot;Color Changer&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now still in the constructor we create a button and a label. We then fill the label with the color red. Fianlly we set the tite of the dialog.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">layout</span> <span class="o">=</span> <span class="n">QHBoxLayout</span><span class="p">()</span>
</span><span class='line'><span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'><span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This part of the code creates the layout of the dialog, pretty simple if you&rsquo;re coming from a Qt background.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">button</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="s">&quot;clicked()&quot;</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">change</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a really important bit here, this shows PyQt&rsquo;s implementation of the signals and slots mechanism. Here we connect the buttons clicked signal to the change function, which simply changes the color of the label.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">Form</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now bringing everything together, we create an QApplication oject which every Qt program needs. And then create an instance of our Form dialog and then call the function to show the dialog. We then enter the event loop of the application using</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p> (notice the slight difference with the original exec function in Qt to account for Python&rsquo;s own exec function), and thats it.</p>

<h2>PySide</h2>

<p>Now this code is very similar to the PyQt code, as obviously it uses pretty much the same framework, so I&rsquo;m only going to go over the changes in the code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PySide.QtCore</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PySide.QtGui</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Form</span><span class="p">(</span><span class="n">QDialog</span><span class="p">):</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">(</span><span class="n">Form</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>      <span class="n">button</span><span class="o">=</span><span class="n">QPushButton</span><span class="p">(</span><span class="s">&quot;Change Color&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">=</span><span class="n">QLabel</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">red</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'>      <span class="n">layout</span> <span class="o">=</span> <span class="n">QHBoxLayout</span><span class="p">()</span>
</span><span class='line'>      <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s">&quot;Color Changer&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">button</span><span class="o">.</span><span class="n">clicked</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">change</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">Form</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok so for the differences:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">PySide.QtCore</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PySide.QtGui</span> <span class="kn">import</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a slightly different import section here for the new PySide bindings.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">button</span><span class="o">.</span><span class="n">clicked</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">change</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The signal and slots procedure is slightly different, here we just chain the object, the event and then the connect function with the function you want to be the slot inside the parenthesis.</p>

<p>So that&rsquo;s it, the only differences. In larger programs you would find a few more but for the most part they are identical.</p>

<h2>wxPython</h2>

<p>This GUI framework is based on the c++ wxWidgets framework. It uses very similar code to the other examples above, with only slight differences in syntax, naming conventions and connecting widgets. We still create our own form that inherits from a dialog class, in this case wx.dialog. We then create the button, I&rsquo;ll go over the rest of the code after you have had a quick browse:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">wx</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">form</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Dialog</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>      <span class="n">wx</span><span class="o">.</span><span class="n">Dialog</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">button</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Change Color&#39;</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">panel</span>  <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Panel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">panel</span><span class="o">.</span><span class="n">SetBackgroundColour</span><span class="p">(</span><span class="s">&#39;RED&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">EVT_BUTTON</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">Change</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">Center</span><span class="p">()</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">Show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">Change</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">event</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">panel</span><span class="o">.</span><span class="n">SetBackgroundColour</span><span class="p">(</span><span class="s">&#39;BLUE&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">panel</span><span class="o">.</span><span class="n">Refresh</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">App</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Color Changer&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">MainLoop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code I want to draw your attention to is this bit here:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">EVT_BUTTON</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">Change</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the way wxPython connects its widgets together, using the Bind function and linking an event, in this case wx.EVT_BUTTON (which is just wxPython&rsquo;s button clicked event), of a certain button which calls a certain function self.change when activated.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">App</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Color Changer&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">MainLoop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code here creates an application object and then creates our own form class which inherits the wx.Dialog class and then calls app.MainLoop() to enter the event loop of the program</p>

<h2>PyGTK</h2>

<p>Now I hate to say it but I&rsquo;m really not a fan of PyGTK, but you should definitely know about it. Here&rsquo;s a bit of code that does the same as the other examples but I&rsquo;m not going to explain it in detail because I&rsquo;d suggest you look at either wxPython or one of the python Qt frameworks. You see the same general theme as the other frameworks, you import the specific module, and then create a window, add buttons using a layout object (in this case a HBox) and then connect widgets together (in this case the connect command chained onto the button object).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pygtk</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gtk</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">form</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">Window</span><span class="p">(</span><span class="n">gtk</span><span class="o">.</span><span class="n">WINDOW_TOPLEVEL</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">&quot;Color Changer&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">set_border_width</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">button</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="s">&quot;Change Color&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">set_size_request</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;clicked&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">show</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hbox</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">HBox</span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hbox</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hbox</span><span class="o">.</span><span class="n">pack_start</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hbox</span><span class="o">.</span><span class="n">pack_start</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">show_all</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">style</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">get_style</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">gc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">fg_gc</span><span class="p">[</span><span class="n">gtk</span><span class="o">.</span><span class="n">STATE_NORMAL</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">gc</span><span class="o">.</span><span class="n">set_rgb_fg_color</span><span class="p">(</span><span class="n">gtk</span><span class="o">.</span><span class="n">gdk</span><span class="o">.</span><span class="n">Color</span><span class="p">(</span><span class="mi">65535</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;expose-event&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">area_expose_cb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">area_expose_cb</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">area</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">draw_rectangle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">gc</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">gc</span><span class="o">.</span><span class="n">set_rgb_fg_color</span><span class="p">(</span><span class="n">gtk</span><span class="o">.</span><span class="n">gdk</span><span class="o">.</span><span class="n">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">65535</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">draw_rectangle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">gc</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">hello</span> <span class="o">=</span> <span class="n">form</span><span class="p">()</span>
</span><span class='line'><span class="n">gtk</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you might be able to tell I&rsquo;m slightly biased towards Qt, but in this case I think I have some good reasons to be, not only by how simple the code is although that is a huge part of it, but also by the support from the developers and the community. For example the documentation on both the Qt frameworks is awesome and there are a lot of resources out there to learn from. Also they have adapted their Qt designer to work with the Python frameworks so one can design them physically and then use them in code. The other frameworks have this ability but it really is so much easier with Qt. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Simplest Wordpress Blog, Part 2]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/03/06/the-simplest-wordpress-blog-part-2/"/>
    <updated>2011-03-06T21:07:32+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/03/06/the-simplest-wordpress-blog-part-2</id>
    <content type="html"><![CDATA[<p>This is the second part of my simple wordpress tutorial, this will go through showing the blog post, the comments section and the search functionally. Putting this tutorial together with the last you&rsquo;ll have a completely unstylized functioning blog, which you can add all the styling you want.</p>

<!-- more -->


<p>So now onto single.php, this is the code to display how a single post is shown. First we&rsquo;ll look at the code to insert the post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">get_header</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="nx">the_post</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;h3&gt;</span><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;h4&gt;</span><span class="cp">&lt;?php</span> <span class="nx">the_author</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">the_content</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$year</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$month</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$day</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  Published: &lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_day_link</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$year</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">$month</span><span class="s2">&quot;</span><span class="p">,</span><span class="s2">&quot;</span><span class="si">$day</span><span class="s2">&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">the_time</span><span class="p">(</span><span class="s1">&#39;F j, Y&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;</span>
</span><span class='line'><span class="x">  Filed Under: </span><span class="cp">&lt;?php</span> <span class="nx">the_category</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">the_tags</span><span class="p">(</span><span class="s1">&#39;Tags: &#39;</span><span class="p">,</span> <span class="s1">&#39; : &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">comments_template</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">previous_post_link</span><span class="p">(</span><span class="s1">&#39;%link&#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;laquo; Previous Post&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">next_post_link</span><span class="p">(</span><span class="s1">&#39;%link&#39;</span><span class="p">,</span> <span class="s1">&#39;Next Post &amp;raquo;&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endwhile</span><span class="p">;</span> <span class="k">else</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;p&gt;Sorry, no posts matched your criteria.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_sidebar</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_footer</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We first set up the loop that checks for the current post using the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">if</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="nx">the_post</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We then extract the required information for the post using wordpress functions, the following commands are the most commonly used:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="c1">// echo&#39;s the post title ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_author</span><span class="p">();</span> <span class="c1">// echo&#39;s the post author ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_content</span><span class="p">();</span> <span class="c1">// echo&#39;s the post content ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_time</span><span class="p">();</span> <span class="c1">// echo&#39;s the date/time of the post ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="c1">// echo&#39;s the category of the post as well as a link to the category page ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_category</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="c1">// echo&#39;s the tags of the post as well as a link to the tag page ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_tags</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the only other functions which we need to include in the single.php file and which we haven&rsquo;t seen already is the worpdress function which pulls in the comments.php file and the functions for linking to the next and previous posts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">comments_template</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">previous_post_link</span><span class="p">(</span><span class="s1">&#39;%link&#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;laquo; Previous Post&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">next_post_link</span><span class="p">(</span><span class="s1">&#39;%link&#39;</span><span class="p">,</span> <span class="s1">&#39;Next Post &amp;raquo;&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The entire single.php follows a very similar pattern to the index.php so you should have no real problem following it, the comments.php file is slightly more complicated and probably the most complicated part of the wordpress system, but they still manage to make it quite simple for us. I&rsquo;m going to split the file comments.php up into managable chucks and explain each chunk, heres the first:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="c1">// Do not delete these lines</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;SCRIPT_FILENAME&#39;</span><span class="p">])</span>
</span><span class='line'><span class="o">&amp;&amp;</span> <span class="s1">&#39;comments.php&#39;</span> <span class="o">==</span> <span class="nb">basename</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;SCRIPT_FILENAME&#39;</span><span class="p">]))</span>
</span><span class='line'>  <span class="k">die</span> <span class="p">(</span><span class="s1">&#39;Please do not load this page directly. Thanks!&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nx">post_password_required</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;p&gt;This post is password protected. Enter the password to view comments.&lt;/p&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is wordpress&rsquo;s own code, do not touch this. It pretty much stops people from accessing the page directly and checks to see if you need a password to view comments, not really something we should worry about, but make sure you include it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">have_comments</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h3&gt;</span><span class="cp">&lt;?php</span> <span class="nx">comments_number</span><span class="p">(</span><span class="s1">&#39;No Responses&#39;</span><span class="p">,</span> <span class="s1">&#39;One Response&#39;</span><span class="p">,</span> <span class="s1">&#39;% Responses&#39;</span> <span class="p">);</span><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  to &quot;</span><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&quot;&lt;/h3&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">previous_comments_link</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">next_comments_link</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;ol&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">wp_list_comments</span><span class="p">(</span><span class="s1">&#39;avatar_size=48&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/ol&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">previous_comments_link</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">next_comments_link</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This chunk of code tests whether there are comments in the wordpress query, and if there is, then the code first of all uses</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">comments_number</span><span class="p">(</span><span class="s1">&#39;No Responses&#39;</span><span class="p">,</span> <span class="s1">&#39;One Response&#39;</span><span class="p">,</span> <span class="s1">&#39;% Responses&#39;</span> <span class="p">);</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p> to print out a statement depending on how many comments there are, the parameters given to the function show quite nicely exactly what the function does and what each parameter does.</p>

<p>Next we provide a link to pages of comments for when pagination is used and then we output the comments using this handy WordPress function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">wp_list_comments</span><span class="p">(</span><span class="s1">&#39;avatar_size=48&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The parameter given here tells us what sixe to put the avatar images on the site, there are a few other parameters and you should probably check out on the wordpress codex, but for our simple blog we don&rsquo;t need it.</p>

<p>Next we have the chunk of code that will generally just display nothing, but you might want to put in a message saying that there are no comments or something like that here.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">comments_open</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">     </span><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This chunk outputs the form where comments are inputted, its quite long because it displays a slightly different form if the user is already logged in. Which is easily checked using:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">is_user_logged_in</span><span class="p">())</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the code is pretty easy to follow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">comments_open</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;comment_registration&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">is_user_logged_in</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;p&gt;You must be &lt;a href=&quot;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;siteurl&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/wp-login.php?redirect_to=</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">the_permalink</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;logged in&lt;/a&gt; to post a comment.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;form action=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;siteurl&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    /wp-comments-post.php&quot; method=&quot;post&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;fieldset&gt;</span>
</span><span class='line'><span class="x">    &lt;legend&gt;</span><span class="cp">&lt;?php</span> <span class="nx">comment_form_title</span><span class="p">(</span><span class="s1">&#39;Leave a Comment&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Leave a Reply to %s&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/legend&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">is_user_logged_in</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">      Logged in as &lt;a href=&quot;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;siteurl&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/wp-admin/profile.php&quot;&gt;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$user_identity</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;. &lt;a href=&quot;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;siteurl&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/wp-login.php?action=logout&quot;</span>
</span><span class='line'><span class="x">      title=&quot;Log out of this account&quot;&gt;Logout &amp;raquo;&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">      &lt;label&gt;Comment:</span>
</span><span class='line'><span class="x">      &lt;textarea name=&quot;comment&quot; id=&quot;comment&quot; cols=&quot;50&quot; rows=&quot;20&quot;&gt;</span>
</span><span class='line'><span class="x">      &lt;/textarea&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">is_user_logged_in</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;label&gt;Name: &lt;em&gt;Required&lt;/em&gt;</span>
</span><span class='line'><span class="x">      &lt;input type=&quot;text&quot; name=&quot;author&quot; id=&quot;author&quot; value=&quot;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$comment_author</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">      &lt;label&gt;Email: &lt;em&gt;Required, not published&lt;/em&gt;</span>
</span><span class='line'><span class="x">      &lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot; value=&quot;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$comment_author_email</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot;/&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">      &lt;label&gt;Homepage: &lt;input type=&quot;text&quot; name=&quot;url&quot; id=&quot;url&quot; value=&quot;</span>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$comment_author_url</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">      &lt;label&gt;Comment:</span>
</span><span class='line'><span class="x">      &lt;textarea name=&quot;comment&quot; id=&quot;comment&quot; cols=&quot;50&quot; rows=&quot;20&quot;&gt;</span>
</span><span class='line'><span class="x">      &lt;/textarea&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;input type=&quot;submit&quot; value=&quot;Post Comment&quot; /&gt;</span>
</span><span class='line'><span class="x">    &lt;input type=&quot;hidden&quot; name=&quot;comment_post_ID&quot; value=&quot;</span>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$id</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;/fieldset&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">    </span><span class="cp">&lt;?php</span> <span class="nx">do_action</span><span class="p">(</span><span class="s1">&#39;comment_form&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">ID</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">    &lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="c1">// if you delete this the sky will fall on your head ?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing you might not understand is the final function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">do_action</span><span class="p">(</span><span class="s1">&#39;comment_form&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">ID</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>which pretty much tells the form what to do with the information. And so there we have it the most simple comments implementaation in the wordpress framework. One last bit to go over is the nice search functionality wordpress has. This is implemented using a theme&rsquo;s search.php file. I&rsquo;m not going to go too much in depth into this as it is very similar to index.php but I thought I would show you the code just to round off this article, so here you go:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">get_header</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;form method=&quot;get&quot; id=&quot;searchform&quot; action=&quot;</span><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;input type=&quot;text&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="nx">the_search_query</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&quot; name=&quot;s&quot; id=&quot;s&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;input type=&quot;submit&quot; id=&quot;searchsubmit&quot; value=&quot;Search&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h2&gt;Search Results&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">while</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="nx">the_post</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    &lt;h3&gt;&lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="nx">the_permalink</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x">&quot; rel=&quot;bookmark&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;&lt;/h3&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="nx">the_excerpt</span><span class="p">(</span><span class="s1">&#39;Read the rest of this entry &amp;raquo;&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span>
</span><span class='line'>          <span class="nv">$year</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$month</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$day</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_day_link</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$year</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">$month</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">$day</span><span class="s2">&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="nx">the_time</span><span class="p">(</span><span class="s1">&#39;F j, Y&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;</span>
</span><span class='line'><span class="x">          Filed Under: </span><span class="cp">&lt;?php</span> <span class="nx">the_category</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="nx">the_tags</span><span class="p">(</span><span class="s1">&#39;Tags:&#39;</span><span class="p">,</span> <span class="s1">&#39; : &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endwhile</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">next_posts_link</span><span class="p">(</span><span class="s1">&#39;&amp;laquo; Older&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">previous_posts_link</span><span class="p">(</span><span class="s1">&#39;Newer &amp;raquo;&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Not Found</span>
</span><span class='line'><span class="x">  &lt;p&gt;Sorry, but you are looking for something that isn&#39;t here.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_sidebar</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_footer</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this will help when designing your new wordpress blog, happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Simplest WordPress Blog]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/03/01/the-simplest-wordpress-blog/"/>
    <updated>2011-03-01T21:28:14+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/03/01/the-simplest-wordpress-blog</id>
    <content type="html"><![CDATA[<p>So I like to start all my Wordpress theme designs with a very simplistic Wordpress base and then add all the complicated functionality found in my themes. I think it is a useful learning tool for the beginner to get used to Wordpress programming. So here&rsquo;s my guide for setting up a really simple blog.</p>

<!-- more -->


<p>First of all go to your wordpress root and find the folder wp-content/themes/ and create a new folder with the name of the theme you&rsquo;d like. Then set up the meta for the theme. This includes setting up the theme name, description and author, this is done by writing a few details in a new file that you need to create called style.css. At the top of the file put some of the details for your theme, you can replace the details that I have entered for your own:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/*</span>
</span><span class='line'><span class="c">theme name: basic</span>
</span><span class='line'><span class="c">theme uri:</span>
</span><span class='line'><span class="c">description: a starter theme</span>
</span><span class='line'><span class="c">version: 0.1</span>
</span><span class='line'><span class="c">author: thomas whitton</span>
</span><span class='line'><span class="c">author uri: http://www.thomaswhitton.com</span>
</span><span class='line'><span class="c">tags: simple, clean, single column</span>
</span><span class='line'><span class="c">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re not going to be putting anything in the css file, but you may want to put in resets for the most commonly used attributes at the beginning, there are loads of these css code segments on the internet and you just need to to pick one and slightly alter it for you particular site, search for style reset in google :).</p>

<p>Then we&rsquo;ll add the index.php, the glue that holds the rest of the files together. First of all we&rsquo;ll create the main Wordpress loop, as this is the most important part of the design. This is the main part of your site, generally on the front page, that displays a selection of your posts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">if</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x">;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">while</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="nx">the_post</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endwhile</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h2&gt;Not Found&lt;/h2&gt;</span>
</span><span class='line'><span class="x">  &lt;p&gt;Sorry, but you are looking for something that isn&#39;t here.&lt;/p&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this code is just checking if any posts exist and then looping through all the posts in reverse chronilogical order. Now inside the loop nothing is happening so whats the point? Well now we can add some special wordpress functions that will extract the information from each post that we loop through. The code also supplies an error message if there are no posts to display.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_permalink</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"> // Returns the url of the permalink to the post</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"> // Returns the title of the post</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">the_author</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"> // Returns the author of the post</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="c1">// Returns the content of the post ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_content</span><span class="p">(</span><span class="s1">&#39;Read the rest of this entry &amp;raquo;&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>These functions are simple enough and are easily used within the loop shown previously, the only slight different is with the_content() function which takes a string as a parameter, this just provides the words for the more text link.</p>

<p>For showing how many comments a post has, still inside the loop, we have a slightly more complicated bit of code. First we have to check certain conditions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">//would normal include different styles for comment closed/open status here</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;closed&#39;</span> <span class="o">==</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">comment_status</span><span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">comments_popup_link</span><span class="p">(</span><span class="s1">&#39;leave a comment&#39;</span><span class="p">,</span>
</span><span class='line'><span class="s1">&#39;1 comment&#39;</span><span class="p">,</span> <span class="s1">&#39;% comments&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;comments closed&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we check if the post allows for comments first, create a div for each case and then use the comments_popup_link() function with parameters showing what words we&rsquo;d like to show for each case particular case of comment status. It&rsquo;s pretty easy to work out what each parameter corresponds to from the example given above.</p>

<p>So thats it for the loop, we obviously have to add a bit more divs and css styling to get everything formatted in the correct way but that goes beyond the scope of this tutorial.</p>

<p>One further bit of code to add after the end of the loop but still inside the if(have_post()) function is the code for pagination. Again wordpress makes this simple and is just a matter of adding:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">next_posts_link</span><span class="p">(</span><span class="s1">&#39;&amp;laquo; Older&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">previous_posts_link</span><span class="p">(</span><span class="s1">&#39;Newer &amp;raquo;&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We then have to include the header, sidebar and footer pages which we&rsquo;ll quickly create in a minute. This is easily done using the built in Wordpress functions as follows. Adding this function to the top of the index.php file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">get_header</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And then to the bottom of index.php:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">get_sidebar</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_footer</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>These functions pull in the the header.php, sidebar.php and footer.php repectively, and we&rsquo;ll create these files now. First we&rsquo;ll create the footer.php as it is simpler. All we need to do is add this code to the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">wp_footer</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The wp_footer() function provides a hook to the footer of the page which Wordpress and Wordpress plugins can utilize. The rest of the file is just the closing of the html tags: body and html, which we will open shortly in the header.php file.</p>

<p>The sidebar.php gives the code for the sidebar on the site, this is quite a common wordpress blog feature. We&rsquo;ll check to see if the their are any widgets loaded in the primary widget area and if not we&rsquo;ll put our own in. Then we&rsquo;ll add a secondry widget area for less important widgets.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">dynamic_sidebar</span><span class="p">(</span><span class="s1">&#39;primary-widget-area&#39;</span><span class="p">))</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">get_search_form</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;li&gt;</span>
</span><span class='line'><span class="x">  &lt;h3&gt;Archives&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">wp_get_archives</span><span class="p">(</span><span class="s1">&#39;type=monthly&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">  &lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;li&gt;</span>
</span><span class='line'><span class="x">  &lt;h3&gt;Meta&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">wp_register</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;li&gt;</span><span class="cp">&lt;?php</span> <span class="nx">wp_loginout</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">wp_meta</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">  &lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span><span class="p">(</span><span class="nx">is_active_sidebar</span><span class="p">(</span><span class="s1">&#39;secondary-widget-area&#39;</span><span class="p">))</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">dynamic_sidebar</span><span class="p">(</span><span class="s1">&#39;secondary-widget-area&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now a lot of what is contained in the header.php file is the standard html head code which contains detailed information about your site, now Wordpress again makes this slightly easier by using specific functions, but really most of it is just a copy and paste job.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span> <span class="k">PUBLIC</span> <span class="s2">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span>
</span><span class='line'><span class="s2">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">xmlns</span><span class="o">=</span><span class="s2">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">language_attributes</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;head&gt;</span>
</span><span class='line'><span class="x">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;html_type&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">; charset=</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;charset&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;title&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">wp_title</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="s1">&#39;right&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"> </span><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/title&gt;</span>
</span><span class='line'><span class="x">&lt;link rel=&quot;stylesheet&quot; href=&quot;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;stylesheet_url&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; type=&quot;text/css&quot; media=&quot;screen&quot; charset=&quot;utf-8&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"> RSS Feed&quot; href=&quot;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;rss2_url&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;link rel=&quot;alternate&quot; type=&quot;application/atom+xml&quot; title=&quot;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"> Atom Feed&quot; href=&quot;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;atom_url&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;link rel=&quot;pingback&quot; href=&quot;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;pingback_url&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">wp_head</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;body </span><span class="cp">&lt;?php</span> <span class="nx">body_class</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h1&gt;&lt;a href=&quot;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;home&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/&quot; title=&quot;Home&quot;&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span><span class="cp">?&gt;</span><span class="x">&lt;/a&gt;&lt;/h1&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only things to take note of are the rss and atom lines that will automatically generates rss and atom feeds using wordpress functions. Also the final line which creates your blog title and links it to your homepage. Apart from these it is pretty each to tell exacty what each wordpress function is doing.</p>

<p>Now as long as you have customized the look and format of your blog using some div&rsquo;s and css you have yourself a front page that shows off your latest posts. At the moment the hyperlinks associated with each post have not been implemented, this will be covered in the 2nd half of this tutorial where we will be looking at individual post pages, the comments for each post and the comment input form.</p>

<p>Please head on over to <a href="http://www.thomaswhitton.com/thomaswhitton/2011/03/06/the-simplest-wordpress-blog-part-2/">Part 2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explorer 16 LCD]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/02/13/explorer-16-lcd/"/>
    <updated>2011-02-13T00:06:12+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/02/13/explorer-16-lcd</id>
    <content type="html"><![CDATA[<p>As a follow up to my previous article on the Explorer 16 board we&rsquo;ll look at displaying a string on the LCD screen supplied on the board in a very similar manner to the serial connection function. In fact we&rsquo;re going to use the standard output of the c standard library to be able to output to the serial port or the LCD screen. The LCD screen is a very important peripheral for displaying useful  information and for quickly debugging programs and doesn&rsquo;t require a  connection to a computer, which is handy.</p>

<!-- more -->


<p>Another important point to mention is the fact that we are going to use the Parallel Master Port (PMP) peripheral, new to the PIC24F series PIC. This module has made connecting to many different types of parallel interface much easier and so is useful when connecting to the  LCD.</p>

<p>First of all create a header file called &ldquo;lcd.h&rdquo;, this will include some useful definitions and function prototypes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define some useful constants</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// access data register</span>
</span><span class='line'><span class="cp">#define LCDDATA 1</span>
</span><span class='line'><span class="c1">// access command register</span>
</span><span class='line'><span class="cp">#define LCDCMD  0</span>
</span><span class='line'><span class="c1">// PMP data buffer</span>
</span><span class='line'><span class="cp">#define PMDATA  PMDIN1</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">initLCD</span><span class="p">();</span>         <span class="c1">// initialise the LCD</span>
</span><span class='line'><span class="kt">char</span> <span class="nf">readLCD</span><span class="p">(</span><span class="kt">int</span> <span class="n">addr</span><span class="p">);</span> <span class="c1">// read from the LCD</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define some macros that make life a bit easier</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// check if LCD busy</span>
</span><span class='line'><span class="cp">#define busyLCD() readLCD( LCDCMD) &amp; 0x80</span>
</span><span class='line'><span class="c1">// check address of LCD position</span>
</span><span class='line'><span class="cp">#define addrLCD() readLCD( LCDCMD) &amp; 0x7F</span>
</span><span class='line'><span class="c1">// read what is on the LCD</span>
</span><span class='line'><span class="cp">#define getLCD()  readLCD( LCDDATA)</span>
</span><span class='line'><span class="c1">// set cursor position</span>
</span><span class='line'><span class="cp">#define setLCDC( a) writeLCD( LCDCMD, (a &amp; 0x7F) | 0x80)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeLCD</span><span class="p">(</span> <span class="kt">int</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>    <span class="c1">// write to LCD at particular address</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">putLCD</span><span class="p">(</span><span class="kt">char</span> <span class="n">d</span><span class="p">);</span>    <span class="c1">// send a character to be displayed on screen</span>
</span></code></pre></td></tr></table></div></figure>


<p>The comments pretty much explain the different definitions and macros, the real explanation will be needed for the actual implementation of the functions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// check if LCD busy</span>
</span><span class='line'><span class="cp">#define busyLCD() readLCD( LCDCMD) &amp; 0x80</span>
</span><span class='line'><span class="c1">// check address of LCD position</span>
</span><span class='line'><span class="cp">#define addrLCD() readLCD( LCDCMD) &amp; 0x7F</span>
</span><span class='line'><span class="c1">// read what is on the LCD</span>
</span><span class='line'><span class="cp">#define getLCD()  readLCD( LCDDATA)</span>
</span><span class='line'><span class="c1">// set cursor position</span>
</span><span class='line'><span class="cp">#define setLCDC( a) writeLCD( LCDCMD, (a &amp; 0x7F) | 0x80)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The four definitions above allow us to check if the LCD is busy,  check the address, get current display and moving the cursor using a  combination of reading the LCD data, checking for the corresponsding  data and writing to the LCD command register .</p>

<p>Again we have an initialisation function which sets up both the PMP and the LCD screen. The LCD is quite a slow electronic component by micro controller standards so we need to put in a few delays during it&rsquo;s initialisation. This is accomplished by using the Timer1 module on the PIC24F. After the initialisation we can actually physically check if the LCD is ready to use, rather than putting in our own delays.</p>

<p>In the comments I&rsquo;ve put in important information about the specific registers being set, but I suggest you look at the data sheet to see what exactly is happening.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;lcd.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initialise the LCD</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">initLCD</span><span class="p">(</span> <span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// PMP initialization</span>
</span><span class='line'>  <span class="n">PMCON</span> <span class="o">=</span> <span class="mh">0x83BF</span><span class="p">;</span>             <span class="c1">// Enable the PMP</span>
</span><span class='line'>  <span class="n">PMMODE</span> <span class="o">=</span> <span class="mh">0x3FF</span><span class="p">;</span>             <span class="c1">// Master Mode 1</span>
</span><span class='line'>  <span class="n">PMAEN</span> <span class="o">=</span> <span class="mh">0x0001</span><span class="p">;</span>             <span class="c1">// PMA0 enabled</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// initialise TMR1</span>
</span><span class='line'>  <span class="n">T1CON</span> <span class="o">=</span> <span class="mh">0x8030</span><span class="p">;</span>             <span class="c1">// Fosc/2, prescaled 1:256, 16us/tick</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// wait for &gt;30ms</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">2000</span><span class="p">);</span><span class="c1">// 2000 x 16us = 32ms</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//initiate the HD44780 display 8-bit init sequence</span>
</span><span class='line'>  <span class="n">PMADDR</span> <span class="o">=</span> <span class="n">LCDCMD</span><span class="p">;</span>            <span class="c1">// command register</span>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b00111000</span><span class="p">;</span>        <span class="c1">// 8-bit interface, 2 lines, 5x7</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">);</span>   <span class="c1">// 3 x 16us = 48us</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b00001100</span><span class="p">;</span>        <span class="c1">// display ON, cursor off, blink off</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">);</span>   <span class="c1">// 3 x 16us = 48us</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b00000001</span><span class="p">;</span>        <span class="c1">// clear display</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">);</span> <span class="c1">// 100 x 16us = 1.6ms</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b00000110</span><span class="p">;</span>        <span class="c1">// increment cursor, no shift</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">);</span> <span class="c1">// 100 x 16us = 1.6ms</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we create a function that can read from the data register of the LCD, this will allow us to check things like current position and what is currently being display etc.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// read from the LCD</span>
</span><span class='line'><span class="kt">char</span> <span class="nf">readLCD</span><span class="p">(</span> <span class="kt">int</span> <span class="n">addr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">dummy</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">PMMODEbits</span><span class="p">.</span><span class="n">BUSY</span><span class="p">);</span>    <span class="c1">// wait for PMP to be available</span>
</span><span class='line'>  <span class="n">PMADDR</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>              <span class="c1">// select the command address</span>
</span><span class='line'>  <span class="n">dummy</span> <span class="o">=</span> <span class="n">PMDATA</span><span class="p">;</span>             <span class="c1">// initiate a read cycle, dummy read</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">PMMODEbits</span><span class="p">.</span><span class="n">BUSY</span><span class="p">);</span>    <span class="c1">// wait for PMP to be available</span>
</span><span class='line'>  <span class="k">return</span><span class="p">(</span> <span class="n">PMDATA</span><span class="p">);</span>            <span class="c1">// read the status register</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function above reads from the LCD status register and returns it. It does this by first checking to see if the LCD is busy and then computes a dummy read cycle and then checks the data on the PMP once it is no longer busy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// write to LCD at particular address</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeLCD</span><span class="p">(</span> <span class="kt">int</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">busyLCD</span><span class="p">());</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">PMMODEbits</span><span class="p">.</span><span class="n">BUSY</span><span class="p">);</span>    <span class="c1">// wait for PMP to be available</span>
</span><span class='line'>  <span class="n">PMADDR</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// send a character to be displayed on screen</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">putLCD</span><span class="p">(</span> <span class="kt">char</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">z</span><span class="p">,</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// section of code to include special characters such as new line</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span><span class="sc">&#39;\n&#39;</span>:
</span><span class='line'>          <span class="n">setLCDC</span><span class="p">(</span><span class="mh">0x40</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span><span class="sc">&#39;\r&#39;</span>:
</span><span class='line'>          <span class="n">z</span> <span class="o">=</span> <span class="n">addrLCD</span><span class="p">();</span>
</span><span class='line'>          <span class="n">z</span><span class="o">=</span><span class="p">(</span><span class="n">z</span><span class="o">+</span><span class="mi">64</span><span class="p">);</span>
</span><span class='line'>          <span class="n">z</span><span class="o">=</span><span class="p">(</span><span class="n">z</span><span class="o">&amp;</span><span class="mh">0x40</span><span class="p">);</span>
</span><span class='line'>          <span class="n">setLCDC</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span><span class="sc">&#39;\t&#39;</span>:
</span><span class='line'>          <span class="n">z</span> <span class="o">=</span> <span class="n">addrLCD</span><span class="p">();</span>
</span><span class='line'>          <span class="n">x</span><span class="o">=</span> <span class="p">(</span><span class="mi">5</span> <span class="o">-</span> <span class="p">(</span><span class="n">z</span><span class="o">%</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>          <span class="n">setLCDC</span><span class="p">((</span><span class="n">z</span><span class="o">+</span><span class="n">x</span><span class="p">));</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nl">default:</span>
</span><span class='line'>          <span class="n">writeLCD</span><span class="p">(</span> <span class="n">LCDDATA</span><span class="p">,</span> <span class="n">d</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The two above functions actually write to the LCD screen, writeLCD is the general command that takes in a character and an address and putLCD automatically writes to the LCD at its current position. In the putLCD command we have created cases for when we send special characters to the LCD, these include the newline character &lsquo;\n&rsquo;, the carriage return character &lsquo;\r&rsquo; and the tab character &lsquo;\t&rsquo;. Each one performs a specific action using the macros that were defined earlier.</p>

<p>Again we need to re-implement the write function in the c standard library. This time we are going to have any output to stdout going to the LCD screen and any output to stderr going to the serial port. All we do is to use the other cases in the switch statement inside the write function to do different things, as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;conu2.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;lcd.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">handle</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>
</span><span class='line'>      <span class="c1">// case for stdout outout</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>              <span class="n">putLCD</span><span class="p">(</span> <span class="o">*</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// case for stderr outout</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>              <span class="n">putU2</span><span class="p">(</span> <span class="o">*</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nl">default:</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To show our library of functions actually work we can create the following main function to test both peripherals.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;conU2.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;lcd.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">initLCD</span><span class="p">();</span>
</span><span class='line'>  <span class="n">InitU2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello lcd&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;hello serial&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The fprintf command allows us to specify the output stream that we want to write to rather than just using printf to output to the default stream of stdout. So in this case stdout is the LCD screen and stderr is the serial port.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning with the Explorer 16]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/02/05/beginning-with-the-explorer-16/"/>
    <updated>2011-02-05T21:22:48+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/02/05/beginning-with-the-explorer-16</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve found it very helpful in the past to teach others things that I have quite a lot of experience in as quite often I learn a few things and at the same time observe a different perspective on a problem, which is very important to a job where problem solving is paramount. So here&rsquo;s my beginners tutorial on programming the 16 bit PIC24F family chip on the Explorer 16 board, which by the way is a pretty awesome board to work with. So I&rsquo;m just quickly going to show how to light an LED and communicate with the computer via the serial port, these things actually reward the user very quickly with some actual physical output. So here it goes:</p>

<!-- more -->


<p>First of all I&rsquo;ll quickly go through the very simple steps to set up your PIC project.</p>

<p>Ok so you&rsquo;ll need the MPLAB IDE and the MPLAB C Compiler for PIC24F PIC&rsquo;s from the Microchip Website, the IDE is free and you can you get the lite version of the compiler for free. Start a new project in the IDE by going to project wizard and selecting your chip and your compiler in the options. Also you&rsquo;ll need to select and add a linker file to your project, it&rsquo;s located inside the compiler&rsquo;s folder inside the sub folder support/PIC24F/gld/, you need to select the file with your exact chip number on it.</p>

<p>So now you&rsquo;re ready to begin actual programming.</p>

<p>The first example I want to show you is the &ldquo;Hello World&rdquo; of the microcontroller programming field, the lighting of an LED. Now there are already LED&rsquo;s on the explorer 16 board so we won&rsquo;t have to do any soldering or connecting up, we just need to know the way in which it is connected up. Now I implore you to download the data sheet for both the PIC and the explorer 16 board, they are so useful and will tell you exactly what is connected to what and what each register controls. In our case the 8 LED&rsquo;s are connected to PORTA which is basically a set of digital input/output ports which we can control with the PIC. Now to set the first LED (D3) on we need to configure the PORTA to be an output on the first LED. We do this by setting</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">TRISA</span> <span class="o">=</span> <span class="mh">0xFFFE</span>
</span></code></pre></td></tr></table></div></figure>


<p>TRISA is the register of the PIC that controls whether or not a digital i/o pin is an input (bit has value 1) or an output (bit has value 0). The 0x in front of the FFFE means that it is a hexadecimal number which in binary form is: 1111111111111110, setting the very first pin RA0 to an output. You can also set the bit as an output by using</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">TRISAbits</span><span class="p">.</span><span class="n">RA0</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is a handy shortcut when you only really need to change 1 bit.</p>

<p>Ok so we have set the pin as an output, now we want to set whether it is actually giving out current, we do this by setting the pin high, if the pin is low then it gives out no current. To do this we set the first bit of the PORTA register to 1 i.e.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PORTA</span><span class="o">=</span><span class="mh">0x0001</span>
</span></code></pre></td></tr></table></div></figure>


<p>As with all c programs we&rsquo;re going to need to put this in the usual main function so set up your main.c file to look like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">TRISA</span> <span class="o">=</span> <span class="mh">0xFFFE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PORTA</span> <span class="o">=</span> <span class="mh">0x0001</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to put the header file for your PIC at the top of the file, just use your exact PIC designator with a .h at the end, the same as your linker file. Just a quick note about the while at the end of the code, we need that there so that the PIC doesn&rsquo;t complete the program as when it does the LED will turn off, and it will do this so quickly that you will not even see it flash. So now go to project on the top menu and click build all, then select your programmer and program your PIC. The D3 LED should turn on and shows how easy it is to control something physically with some programming and a PIC.</p>

<p>Next I&rsquo;ll show you a simple way to use your serial port connection to connect to your computer. A few things you&rsquo;ll need before we get going, first of all serial ports are kind of legacy equipment for computers nowadays so it is very unlikely your pc will have one, however they are very easy connection to use and are still widely accepted in the embedded programming world, so you&rsquo;ll probably need a usb to serial adapter. Another thing you&rsquo;ll need is hyper terminal, a really great simple windows program that will do exactly what we need, however on more modern window versions they don&rsquo;t have it included so you might have to download a copy from the internet. So anyway onto the programming.</p>

<p>First of all you to need to initialise the uart2 module on the board so that you can use it with the serial port with particular connection information. I&rsquo;m going to put this in a separate function to make it easier in the main program. We&rsquo;ll make a library file &ldquo;u2.h&rdquo; to contain come constants:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// some helpful definitions for setting the uart2 module</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// clear To Send, input, HW handshake</span>
</span><span class='line'><span class="cp">#define CTS _RF12</span>
</span><span class='line'><span class="c1">// request To Send, output, HW handshake</span>
</span><span class='line'><span class="cp">#define RTS _RF13</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initialise the serial port (UART2, 115200@32MHz, 8, N, 1, CTS/RTS )</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">initU2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// send a character to the serial port</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">putU2</span><span class="p">(</span> <span class="kt">int</span> <span class="n">c</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we make the &ldquo;u2.c&rdquo; file that contains the initialisation function and also the function to send a single ASCII character to the serial port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;u2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tris control for RTS pin</span>
</span><span class='line'><span class="cp">#define TRTS TRISFbits.TRISF13</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// timing and baud rate settings</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 115200 baud (BREGH=1)</span>
</span><span class='line'><span class="cp">#define BRATE 34</span>
</span><span class='line'><span class="c1">// enable the UART peripheral</span>
</span><span class='line'><span class="cp">#define U_ENABLE 0x8008</span>
</span><span class='line'><span class="c1">// enable transmission</span>
</span><span class='line'><span class="cp">#define U_TX 0x0400</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initialise the serial port (UART2, 115200, 8, N, 1, CTS/RTS )</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">initU2</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">U2BRG</span> <span class="o">=</span> <span class="n">BRATE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">U2MODE</span> <span class="o">=</span> <span class="n">U_ENABLE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">U2STA</span> <span class="o">=</span> <span class="n">U_TX</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TRTS</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="err">       </span> <span class="c1">// make RTS output</span>
</span><span class='line'>  <span class="n">RTS</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">       </span> <span class="c1">// set RTS default status</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// send a character to the UART2 serial port</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">putU2</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">CTS</span><span class="p">);</span><span class="err">  </span> <span class="err">   </span> <span class="err">        </span> <span class="c1">// wait for clear to send</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">U2STAbits</span><span class="p">.</span><span class="n">UTXBF</span><span class="p">);</span><span class="err"> </span> <span class="err"> </span> <span class="c1">// wait while Tx buffer full</span>
</span><span class='line'>  <span class="n">U2TXREG</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this means that the function putU2() has an input of a single character and sends it down the serial port, now what we really want is a function to write an entire string to the serial port. So we are going to reimplement the printf function in the c standard library and use that to send a string to the serial port, its useful since the printf function doesn&rsquo;t really have a current output to print to when working on the explorer 16 board, so we create one. To do this we create a new file write.c to override the old write function which is used by printf to actually write the data. So the write file should look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;u2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">handle</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>      <span class="c1">// case for stdout output</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="n">putU2</span><span class="p">(</span> <span class="o">*</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">default:</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and now in your main function you simply need to initialise the uart2 and then use the printf command to send a string, as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;u2.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">initU2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What you will want to do now is to compile and transfer the program to the board and then connect the Explorer 16 to the serial port on your computer (or usb to serial adapter) and open up hyper terminal. Create a new connection on the COM port of your serial port and set the baud rate to 115200, data bits to 8, parity to none, stop bits to 1 and flow control to hardware. Then you should be able to see your board spitting out the word hello on every iteration of the while loop. Now that you have a connection to your board there are a ton of things you can do, the most useful I&rsquo;ve encountered are data collection, controlling equipment and debugging. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt Etiquette]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/01/27/qt-etiquette/"/>
    <updated>2011-01-27T20:55:41+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/01/27/qt-etiquette</id>
    <content type="html"><![CDATA[<p>So I have been using Qt now for about six months and I have to say it is one of the best frameworks I have ever used, it seems very complete, the documentation for it is amazing and even the Qt IDE: Qt Creator is awesome. Some of the really useful things I find are the signal and slot mechanism, the widget methodology and the expanse of widgets available. So I feel pretty confident with Qt now and just though I&rsquo;d share some information that I learned along the way that may or may not be included in the documentation, the sort of info only found by experience. Hopefully this helps a few people out, so here it goes.</p>

<!-- more -->


<p>One thing I found when using signals and slots was that I had trouble connecting signals and slots when they there was a widget inside a widget inside a widget, lets call them A, B and C respectively. Setting up a connection between A and C was impossible, what I had to do was create an intermediate slot inside B that emitted a signal from B, to keep the signal going. This was pretty annoying as I had to create the new slot function and there was a simple solution that I didn&rsquo;t get for a while. Connections can be made between a signal and a signal, so that when the first emitted so is the other signal, now this may not be a huge improvement in code, but it looks so much neater and when working on a larger project it is so much easier to follow. A simple example, not sure it&rsquo;s really needed, but anyway here it is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">connect</span><span class="p">(</span><span class="n">myButton</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">clicked</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">buttonClicked</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another problem I had with signals and slots was that sometimes I&rsquo;d like to quickly take control of my connection and stop it for a while and then reconnect it, and this was fine I could use the</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">QObject:</span><span class="n">disconnect</span>
</span></code></pre></td></tr></table></div></figure>


<p>method to explicitly remove the connection and then reattach it in the normal way. This gets a bit complicated when you are dealing with an important QObject and there a lot of connections that need to be disconnected, half your code would be establishing and disconnecting connections. There&rsquo;s a handy method in the QObject toolbox that solves this problem called</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">QObject:</span><span class="n">blockSignals</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function blocks all signals being emitted from an object, if set to true and you can easily remove this block by calling this function again with the false parameter.</p>

<p>These two fixes really helped me fall in love with the signal and slot mechanism behind pretty much any Qt program.</p>

<p>A lot of questions I see paraded around in regards to Qt is about which containers classes to use. Now I have pretty much been brought up on the STL, and know them pretty well but I am a big believer that when using a particular framework that you use the more integrated containers. Not only that but the documentation for the Qt containers insdie the Qt Creator IDE is impressive, press F1 and I have every single meber function and there are a lot of them. Not only that but reading some of the documentation surrounding Qt containers brought me to an underlying methodology called implicitly shared. Which pretty much means that within any Qt container class it will make your code more efficient by reducing the copying with that container, vist the <a href="http://doc.qt.nokia.com/latest/implicit-sharing.html#implicitly-shared">website</a> for more details. Also lots of outputs of other functions within Qt generate the Qt generic classes so the amount of code needed to convert and reconvert would be a bit excessive.</p>

<p>Another thing I liked about Qt was how easy it was to access external applicationsand give input arguemnts and easily receive standard outputs (mainly command line). This has been really useful when making wrappers for some of my commonly used command line applications (a task I try to do whenever learning a new gui framework) this meant I didn&rsquo;t have to worry too much about looking through a lot of code and the only way to proceed when using a closed source application. A simple example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// declare a new QProcess</span>
</span><span class='line'><span class="n">QProcess</span> <span class="o">*</span><span class="n">extraction</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QProcess</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define command line arguments</span>
</span><span class='line'><span class="n">QStringList</span> <span class="n">args</span><span class="p">;</span>
</span><span class='line'><span class="n">args</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;e&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/ad&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/y&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run external application</span>
</span><span class='line'><span class="n">extraction</span><span class="o">-&gt;</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;C:/Program Files/WinRAR/unRAR&quot;</span><span class="p">,</span> <span class="n">args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get the output from the application</span>
</span><span class='line'><span class="n">QByteArray</span> <span class="n">output</span> <span class="o">=</span> <span class="n">extraction</span><span class="o">-&gt;</span><span class="n">readAllStandardOutput</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this has been at least slightly helpful to anyone who has read it, and for anyone who has yet to make the leap into the Qt framework I say go for it, you won&rsquo;t regret it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption Libraries]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/01/20/encryption-libraries/"/>
    <updated>2011-01-20T20:44:29+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/01/20/encryption-libraries</id>
    <content type="html"><![CDATA[<p>Recently I was working on a small personal project and I was in need of a quick and easy encryption library that would be able to do quite a few different encryption algorithms. My only real prerequisites were that the library had to be in c++ (well c would do but I&rsquo;d prefer it to be in oop form), the encryption algorithms had to include AES 128 and it had to be cross platform. I was quite surprised at how few encryption libraries there were for c++. The three mainstream cross platform libraries that I found were crypto++, Botan and QCA (Qt Cryptology Architecture) (there was also the OpenSSL library but that is written in c).</p>

<!-- more -->


<p>I first looked at QCA considering my project was using Qt and since it uses a Qt-style API and Qt datatypes it was a very obvious first choice. I was quite surprised at how simple it was to perform an encryption, decryption cipher using AES 128, but I did have quite a bit of trouble using the QCA plugin with Qt Creator on my Windows PC, where as with Linux it was working within minutes. This is the code I had to get it working on linux, no guarantees for windows.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// setup the encryption library</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">Initializer</span> <span class="n">init</span><span class="p">;</span>
</span><span class='line'><span class="c1">// define the message to be encrypted</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">arg</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// create a random 16 bit key</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SymmetricKey</span> <span class="n">key</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="c1">// create a random 16 bit initialisation vector</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">InitializationVector</span> <span class="n">iv</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// check the encryption algorithm is supported</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">QCA</span><span class="o">::</span><span class="n">isSupported</span><span class="p">(</span><span class="s">&quot;aes128-cbc-pkcs7&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">qDebug</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;AES128-CBC not supported!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// create the cipher defintion</span>
</span><span class='line'>  <span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span> <span class="n">cipher</span><span class="p">(</span>
</span><span class='line'>          <span class="n">QString</span><span class="p">(</span><span class="s">&quot;aes256&quot;</span><span class="p">),</span>
</span><span class='line'>          <span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span><span class="o">::</span><span class="n">CBC</span><span class="p">,</span>
</span><span class='line'>          <span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span><span class="o">::</span><span class="n">DefaultPadding</span><span class="p">,</span>
</span><span class='line'>          <span class="n">QCA</span><span class="o">::</span><span class="n">Encode</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// start encryption process</span>
</span><span class='line'>  <span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">u</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">f</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">final</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">cipherText</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// end encryption process</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// convert to QString</span>
</span><span class='line'>  <span class="n">QString</span> <span class="n">out</span> <span class="o">=</span> <span class="n">QCA</span><span class="o">::</span><span class="n">arrayToHex</span><span class="p">(</span><span class="n">cipherText</span><span class="p">.</span><span class="n">toByteArray</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the QCA plugin was causing me trouble I thought I&rsquo;d try out the other libraries. Crypto++ was the next obvious choice since it has fips accreditation on a lot of its algorithms. It seemed like a really good library with a lot of amazing features. However, I really struggled with its complex code and lack of understandable documentation. It had a very steep learning curve and was definitely not useful for a relative beginner into cryptography. I gave up trying to get it to work and tried my third library: Botan, and I was very glad I did. Here&rsquo;s a sample of the code needed to get it woorking but I really struggled with it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// key and IV setup</span>
</span><span class='line'><span class="n">byte</span> <span class="n">key</span><span class="p">[</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span> <span class="p">],</span> <span class="n">iv</span><span class="p">[</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">BLOCKSIZE</span> <span class="p">];</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span> <span class="n">key</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span> <span class="p">);</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span> <span class="n">iv</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">BLOCKSIZE</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string and output setup</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">plaintext</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ciphertext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create cipher Text</span>
</span><span class='line'><span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">Encryption</span> <span class="n">aesEncryption</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span><span class="p">);</span>
</span><span class='line'><span class="n">CryptoPP</span><span class="o">::</span><span class="n">CBC_Mode_ExternalCipher</span><span class="o">::</span><span class="n">Encryption</span> <span class="n">cbcEncryption</span><span class="p">(</span> <span class="n">aesEncryption</span><span class="p">,</span> <span class="n">iv</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CryptoPP</span><span class="o">::</span><span class="n">StreamTransformationFilter</span> <span class="n">stfEncryptor</span><span class="p">(</span>
</span><span class='line'>        <span class="n">cbcEncryption</span><span class="p">,</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">StringSink</span><span class="p">(</span> <span class="n">ciphertext</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">stfEncryptor</span><span class="p">.</span><span class="n">Put</span><span class="p">(</span>
</span><span class='line'>        <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*&gt;</span> <span class="p">(</span> <span class="n">plaintext</span><span class="p">.</span><span class="n">data</span><span class="p">()</span> <span class="p">),</span>
</span><span class='line'>        <span class="n">plaintext</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">stfEncryptor</span><span class="p">.</span><span class="n">MessageEnd</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// convert to QString</span>
</span><span class='line'><span class="n">QString</span> <span class="n">output</span> <span class="o">=</span> <span class="n">QString</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">.</span><span class="n">c_str</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now Botan by comparison was very easy to pick up. It uses a very nice programming paradigm using real life metaphors, such as pipes, filters and forks. Pipes are just conduits of data where processes are applied to the data flowing through, such as encrpytion, hashes etc. In Botan terminology these processes are called filters and a pipe can have as many or as little as you like. Forks are where you split the data so that you end up with different outputs using the same data, assuming the filters you use are different. The documentation is also very easy to comprehend. The only downside is that it is not accredited, but it is still a very well respected encryption library none the less.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// initialise the Botan library</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">LibraryInitializer</span> <span class="n">init</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">RandomNumberGenerator</span> <span class="o">*</span><span class="n">rnd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Botan</span><span class="o">::</span><span class="n">AutoSeeded_RNG</span><span class="p">();</span>
</span><span class='line'><span class="c1">// generate random 16 bit key</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">SymmetricKey</span> <span class="n">key</span><span class="p">(</span><span class="o">*</span><span class="n">rnd</span><span class="p">,</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="k">delete</span> <span class="n">rnd</span><span class="p">;</span>
</span><span class='line'><span class="c1">// generate random 16 bit initialisation vector</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">SecureVector</span><span class="o">&lt;</span><span class="n">Botan</span><span class="o">::</span><span class="n">byte</span><span class="o">&gt;</span> <span class="n">raw_iv</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">InitializationVector</span> <span class="n">iv</span><span class="p">(</span><span class="n">raw_iv</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="c1">// define text to be encrypted</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// generate cipher &quot;pipe&quot;</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">Pipe</span> <span class="n">pipe</span><span class="p">(</span><span class="n">get_cipher</span><span class="p">(</span><span class="s">&quot;AES-128/CBC&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">Botan</span><span class="o">::</span><span class="n">ENCRYPTION</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// add text to pipe</span>
</span><span class='line'><span class="n">pipe</span><span class="p">.</span><span class="n">process_msg</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get std:string encrypted output</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">output</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">.</span><span class="n">read_all_as_string</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// convert to Qstring</span>
</span><span class='line'><span class="n">QString</span> <span class="n">qoutput</span> <span class="o">=</span> <span class="n">QString</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>In conclusion if you&rsquo;re looking for a quick and cheerful encrpytion library thats easy to pick up, I&rsquo;d say go for Botan. Now dependent on the program you&rsquo;re building and how much accreditation you need I&rsquo;d say you might want to look at some of the others, but it might be worth trying Botan first to quickly create an early, perfectly function version of your program.</p>
]]></content>
  </entry>
  
</feed>
