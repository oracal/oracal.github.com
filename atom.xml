<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thomas Whitton]]></title>
  <link href="http://oracal.github.com/atom.xml" rel="self"/>
  <link href="http://oracal.github.com/"/>
  <updated>2013-04-02T23:17:23+01:00</updated>
  <id>http://oracal.github.com/</id>
  <author>
    <name><![CDATA[Thomas Whitton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cineworld API]]></title>
    <link href="http://oracal.github.com/blog/2011/08/26/cineworld-api/"/>
    <updated>2011-08-26T22:19:42+01:00</updated>
    <id>http://oracal.github.com/blog/2011/08/26/cineworld-api</id>
    <content type="html"><![CDATA[<p>So after working on commercial software for a few years, I really fancied getting my feet wet in some open source software again, I haven&#8217;t had too much time for this, but when I found out my favorite cinema had their own API I couldn&#8217;t resist making a wrapper for it.</p>

<p>It only took a couple of hours but it was quite fun to make. I tried to make up for missing information supplied by the API by introducing some simple hacks to get the information a different way. I&#8217;ll go through my methodology in this blog post as well as some simple use cases. So here it is the <a href="https://github.com/oracal/cineworld">Cineworld API Wrapper written in Python</a></p>

<!-- more -->


<p>First of there are two mode of operations regarding the API key, you can either store it in a file (which I suggest) or you can use it as an argument into the main class. Here is a simple search method for finding a film:</p>

<p>Without saving your API key in the cineworld_api_key.py file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">cineworld</span> <span class="kn">import</span> <span class="n">CW</span>
</span><span class='line'><span class="n">CW</span><span class="p">(</span><span class="s">&#39;my_api_key&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">film_search</span><span class="p">(</span><span class="s">&#39;some movie here&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With your API key saved:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">cineworld</span> <span class="kn">import</span> <span class="n">CW</span>
</span><span class='line'><span class="n">CW</span><span class="p">()</span><span class="o">.</span><span class="n">film_search</span><span class="p">(</span><span class="s">&#39;some movie here&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;d like to mention that the cineworld API doesn&#8217;t have a way to search using film titles so I had to make my own using their list of films. But before I get into explaining that I would like to go through some of the easy functions that just directly link to the API.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#base function for connecting to API</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_list</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">datatype</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="n">search_url</span> <span class="o">=</span> <span class="p">[</span><span class="n">url</span><span class="p">,</span> <span class="s">&#39;?&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">kwargs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&#39;key&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">api_key</span><span class="p">})</span>
</span><span class='line'>    <span class="n">search_url</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">urlencode</span><span class="p">(</span><span class="n">kwargs</span><span class="p">))</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_url</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="n">datatype</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">#gets a list of all cineworld cinemas and allows further customization of the list using arguments located in the API documentation</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_cinemas</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_list</span><span class="p">(</span><span class="s">&#39;cinemas&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">cinemas_url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#gets a list of all films currently playing in cineworld cinemas and allows further customization of the list using arguments located in the API documentation</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_films</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_list</span><span class="p">(</span><span class="s">&#39;films&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">films_url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#cache the result of the list of films in case of multiple searching on the same object</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_film_list</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">film_list</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_films</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">film_list</span>
</span><span class='line'>
</span><span class='line'><span class="c">#gets a list of all dates when films are playing at cineworld cinemas and allows further customization of the list using arguments located in the API documentation</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_dates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_list</span><span class="p">(</span><span class="s">&#39;dates&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">dates_url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#not well documented but I assume it&#39;s for more specialized performances i.e. not films</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_performances</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_list</span><span class="p">(</span><span class="s">&#39;performances&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">performances_url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each function above accesses their respective API call and allows the user to specify their own arguments using the **kwargs parameter. These are the only functions to actually call the API and the rest of the functionality is completely based on these. A unique identifier can be passed along with the get_cinemas and get_films function to allow us to get specific film information.</p>

<p>Now the problem I have is how do I get specific films if a user wanted one, they would have to first call the get_films function and then manually pick out their film. The list returned from the films API does contain a unique identifier for each film called the EDI number. However, EDI numbers are not as popular as say imdb or the tmdb movie identification number. The only way to get the specific film information is to look at the name and extract its EDI number. The problem was that the name of the films could be slightly different from imdb or tmdb so I couldn&#8217;t do an exact string match. They could be shortened versions of the film names or additional identifiers such as 3D appended onto the name.</p>

<p>So I pretty much had to implement my own search functionality using the film list generated by cineworld as the base information. Now performance wasn&#8217;t really an issue as there were only at most about 20 films in the list, so I didn&#8217;t need hardcore performance search indexers like Lucene and I could easily use python for my search.</p>

<p>What I needed was a fuzzy searching alogirthm, luckily I had just read a <a href="http://seatgeek.com/blog/dev/fuzzywuzzy-fuzzy-string-matching-in-python">seatgeek blog post</a> with a really great introductory tutorial on fuzzy searching. They aslo released the code they used as an opensource python library amazingly called <a href="https://github.com/seatgeek/fuzzywuzzy">fuzzywuzzy</a>. It provided me with an easy way to match a good representation a film title with the film name that cineworld would give me.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">fuzzywuzzy.fuzz</span> <span class="kn">import</span> <span class="n">WRatio</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">film_search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>  <span class="n">films</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="c">#check for cache or update</span>
</span><span class='line'>  <span class="k">if</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;film_list&#39;</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">get_film_list</span><span class="p">()</span>
</span><span class='line'>  <span class="c">#iterate over films and check for fuzzy string match</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">film</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">film_list</span><span class="p">:</span>
</span><span class='line'>      <span class="n">strength</span> <span class="o">=</span> <span class="n">WRatio</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">film</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">])</span>
</span><span class='line'>      <span class="k">if</span>  <span class="n">strength</span> <span class="o">&gt;</span> <span class="mi">80</span><span class="p">:</span>
</span><span class='line'>          <span class="n">film</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">u&#39;strength&#39;</span><span class="p">:</span><span class="n">strength</span><span class="p">})</span>
</span><span class='line'>          <span class="n">films</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">film</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#sort films by the strength of the fuzzy string match</span>
</span><span class='line'>  <span class="n">films_sorted</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">films</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">itemgetter</span><span class="p">(</span><span class="s">&#39;strength&#39;</span><span class="p">),</span> <span class="n">reverse</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">films_sorted</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this function will return a list of films ordered by the strength of the fuzzy string match, generally we will only need the top results, possible the second result when the string matches a film name with both its 2D and 3D version. So this is going to be the main function to get hold of a film&#8217;s id and then use that to find show times etc.</p>

<p>I needed a way to get the current box office films to place on a site, unfortunately Cineworld have quite a few unorthodox films that play sometimes, like kids cartoons on Saturday morning and Bollywood films on a Thursday. Not that those films aren&#8217;t important but I wouldn&#8217;t say they were really Box Office films. Wednesday on the other hand, being Orange Wednesdays, generally had all of the Box Office films playing. Also, the way the Cineworld site seemed to work was that looking forward to Wednesday was a good way to get the most up to date films. So I made a function that would look forward to the next Wednesday and return a list of films playing that night. Also, I picked a single cinema which was likely to have quite a large amount of films due to its size, the O2 in Greenwich. Finally I made sure that I wouldn&#8217;t get both the 3D and the 2D version of the film and it would only return the film name once using a simple filter to remove any 3D films and then removing the 2D text at the beginning of the string.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#uses a certain cinema (O2) and a certain day when non specialist films show (Wednesday) to get a list of the latest box office films</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_box_office_films</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="n">today</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'>  <span class="n">next_wednesday</span> <span class="o">=</span> <span class="p">(</span><span class="n">today</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">((</span><span class="mi">2</span> <span class="o">-</span> <span class="n">today</span><span class="o">.</span><span class="n">weekday</span><span class="p">())</span> <span class="o">%</span> <span class="mi">7</span><span class="p">))</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y%m</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">films</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_films</span><span class="p">(</span><span class="n">cinema</span><span class="o">=</span><span class="mi">79</span><span class="p">,</span> <span class="n">date</span> <span class="o">=</span> <span class="n">next_wednesday</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">films</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s">&#39;3D&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">],</span> <span class="n">films</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">film</span> <span class="ow">in</span> <span class="n">films</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="s">&#39;2D -&#39;</span> <span class="ow">in</span> <span class="n">film</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]:</span>
</span><span class='line'>          <span class="n">film</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span><span class="o">=</span><span class="n">film</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">][</span><span class="mi">5</span><span class="p">:]</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">films</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s pretty easy to see that using quite a basic API you can create a lot more functionality with only making the slightest of approximations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python GUI Programming]]></title>
    <link href="http://oracal.github.com/blog/2011/03/06/python-gui-programming/"/>
    <updated>2011-03-06T21:28:00+00:00</updated>
    <id>http://oracal.github.com/blog/2011/03/06/python-gui-programming</id>
    <content type="html"><![CDATA[<p>There are many options for GUI programming with Python. I&#8217;ll go over my favorite, and generally most well known frameworks and show you some simple programs with each one. In fact these aren&#8217;t really Python frameworks but actually Python bindings for already established c/c++ libraries. So the three options are PyQt/PySide, wxPython  and PyGTK with their respective c++ frameworks Qt, wxWidgets and GTK+. I&#8217;ll go over the differences of PyQt and PySide, I mention both since PyQt is more mature than PySide but has a more restrictive license, also PySide has just moved out of beta with its version 1 release, and according to its creators, the company behind the original Qt, it is ready for production level code.</p>

<!-- more -->


<p>The GUI program we&#8217;ll make is a simple single button example that changes the color of a square rectangle. In each of the frameworks this will show its basic syntax, its widget creation and show its widget interconnectivity. Three of the most important aspects in using a GUI framework, especially widget connectivity.</p>

<h2>PyQt</h2>

<p>When I first started looking at Python GUI frameworks I of course had already heard about PyQt from my extensive work with Qt using c++. If I ever found a solution online for a Qt problem using PyQt it was easily transferable to the c++ world. Now PyQt is the more mature set of bindings for Qt and therefore is generally a good choice if one already knows Qt, however it only has a GPL license which means you need to purchase a license to sell on the program when using PyQt. In contrast to PySide (which we shall discuss later) which has a LGPL license when can be used in a commercial application without license.</p>

<p>Now getting past the licensing issues, PyQt is extremely easy to work with and contains most of the functionality of the original Qt. I&#8217;m just going to show and explain an example bit of code that will get you used to the PyQt syntax and show some widget connectivity, which you should be able to adapt to any already implemented Qt widgets.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtCore</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtGui</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Form</span><span class="p">(</span><span class="n">QDialog</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">(</span><span class="n">Form</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>      <span class="n">button</span><span class="o">=</span><span class="n">QPushButton</span><span class="p">(</span><span class="s">&quot;Change Color&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">=</span><span class="n">QLabel</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">red</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'>      <span class="n">layout</span> <span class="o">=</span> <span class="n">QHBoxLayout</span><span class="p">()</span>
</span><span class='line'>      <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s">&quot;Color Changer&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">button</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="s">&quot;clicked()&quot;</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">change</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">Form</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ll go over each section of code to explain it</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtCore</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PyQt4.QtGui</span> <span class="kn">import</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>This bit of code simply imports the modules needed for the Qt framework.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Form</span><span class="p">(</span><span class="n">QDialog</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">(</span><span class="n">Form</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This section of code creates our own widget that inherits the QDialog class and then defines the contructor which in turn calls the QDialog constructor.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">button</span><span class="o">=</span><span class="n">QPushButton</span><span class="p">(</span><span class="s">&quot;Change Color&quot;</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">=</span><span class="n">QLabel</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'><span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">red</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s">&quot;Color Changer&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now still in the constructor we create a button and a label. We then fill the label with the color red. Fianlly we set the tite of the dialog.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">layout</span> <span class="o">=</span> <span class="n">QHBoxLayout</span><span class="p">()</span>
</span><span class='line'><span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'><span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This part of the code creates the layout of the dialog, pretty simple if you&#8217;re coming from a Qt background.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">button</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="s">&quot;clicked()&quot;</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">change</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a really important bit here, this shows PyQt&#8217;s implementation of the signals and slots mechanism. Here we connect the buttons clicked signal to the change function, which simply changes the color of the label.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">Form</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now bringing everything together, we create an QApplication oject which every Qt program needs. And then create an instance of our Form dialog and then call the function to show the dialog. We then enter the event loop of the application using</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p> (notice the slight difference with the original exec function in Qt to account for Python&#8217;s own exec function), and thats it.</p>

<h2>PySide</h2>

<p>Now this code is very similar to the PyQt code, as obviously it uses pretty much the same framework, so I&#8217;m only going to go over the changes in the code.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PySide.QtCore</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PySide.QtGui</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Form</span><span class="p">(</span><span class="n">QDialog</span><span class="p">):</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">(</span><span class="n">Form</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>      <span class="n">button</span><span class="o">=</span><span class="n">QPushButton</span><span class="p">(</span><span class="s">&quot;Change Color&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">=</span><span class="n">QLabel</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">red</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'>      <span class="n">layout</span> <span class="o">=</span> <span class="n">QHBoxLayout</span><span class="p">()</span>
</span><span class='line'>      <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">layout</span><span class="o">.</span><span class="n">addWidget</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">setLayout</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">setWindowTitle</span><span class="p">(</span><span class="s">&quot;Color Changer&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">button</span><span class="o">.</span><span class="n">clicked</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">change</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">fill</span> <span class="o">=</span> <span class="n">QPixmap</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fill</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">Qt</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">setPixmap</span><span class="p">(</span><span class="n">fill</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="n">form</span> <span class="o">=</span> <span class="n">Form</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">exec_</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok so for the differences:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">PySide.QtCore</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">PySide.QtGui</span> <span class="kn">import</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a slightly different import section here for the new PySide bindings.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">button</span><span class="o">.</span><span class="n">clicked</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">change</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The signal and slots procedure is slightly different, here we just chain the object, the event and then the connect function with the function you want to be the slot inside the parenthesis.</p>

<p>So that&#8217;s it, the only differences. In larger programs you would find a few more but for the most part they are identical.</p>

<h2>wxPython</h2>

<p>This GUI framework is based on the c++ wxWidgets framework. It uses very similar code to the other examples above, with only slight differences in syntax, naming conventions and connecting widgets. We still create our own form that inherits from a dialog class, in this case wx.dialog. We then create the button, I&#8217;ll go over the rest of the code after you have had a quick browse:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">wx</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">form</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">Dialog</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>      <span class="n">wx</span><span class="o">.</span><span class="n">Dialog</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">button</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Change Color&#39;</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">panel</span>  <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Panel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">120</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">panel</span><span class="o">.</span><span class="n">SetBackgroundColour</span><span class="p">(</span><span class="s">&#39;RED&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">EVT_BUTTON</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">Change</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">Center</span><span class="p">()</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">Show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">Change</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">event</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">panel</span><span class="o">.</span><span class="n">SetBackgroundColour</span><span class="p">(</span><span class="s">&#39;BLUE&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">panel</span><span class="o">.</span><span class="n">Refresh</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">App</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Color Changer&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">MainLoop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code I want to draw your attention to is this bit here:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">Bind</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">EVT_BUTTON</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">Change</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the way wxPython connects its widgets together, using the Bind function and linking an event, in this case wx.EVT_BUTTON (which is just wxPython&#8217;s button clicked event), of a certain button which calls a certain function self.change when activated.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">App</span><span class="p">()</span>
</span><span class='line'><span class="n">form</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Color Changer&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">MainLoop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code here creates an application object and then creates our own form class which inherits the wx.Dialog class and then calls app.MainLoop() to enter the event loop of the program</p>

<h2>PyGTK</h2>

<p>Now I hate to say it but I&#8217;m really not a fan of PyGTK, but you should definitely know about it. Here&#8217;s a bit of code that does the same as the other examples but I&#8217;m not going to explain it in detail because I&#8217;d suggest you look at either wxPython or one of the python Qt frameworks. You see the same general theme as the other frameworks, you import the specific module, and then create a window, add buttons using a layout object (in this case a HBox) and then connect widgets together (in this case the connect command chained onto the button object).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pygtk</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gtk</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">form</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">Window</span><span class="p">(</span><span class="n">gtk</span><span class="o">.</span><span class="n">WINDOW_TOPLEVEL</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">&quot;Color Changer&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">set_border_width</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">button</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="s">&quot;Change Color&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">DrawingArea</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">set_size_request</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;clicked&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">show</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hbox</span> <span class="o">=</span> <span class="n">gtk</span><span class="o">.</span><span class="n">HBox</span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hbox</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hbox</span><span class="o">.</span><span class="n">pack_start</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hbox</span><span class="o">.</span><span class="n">pack_start</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">show_all</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">style</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">get_style</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">gc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">fg_gc</span><span class="p">[</span><span class="n">gtk</span><span class="o">.</span><span class="n">STATE_NORMAL</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">gc</span><span class="o">.</span><span class="n">set_rgb_fg_color</span><span class="p">(</span><span class="n">gtk</span><span class="o">.</span><span class="n">gdk</span><span class="o">.</span><span class="n">Color</span><span class="p">(</span><span class="mi">65535</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot;expose-event&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">area_expose_cb</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">area_expose_cb</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">area</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">draw_rectangle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">gc</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">gc</span><span class="o">.</span><span class="n">set_rgb_fg_color</span><span class="p">(</span><span class="n">gtk</span><span class="o">.</span><span class="n">gdk</span><span class="o">.</span><span class="n">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">65535</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">drawingarea</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">draw_rectangle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">gc</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">hello</span> <span class="o">=</span> <span class="n">form</span><span class="p">()</span>
</span><span class='line'><span class="n">gtk</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you might be able to tell I&#8217;m slightly biased towards Qt, but in this case I think I have some good reasons to be, not only by how simple the code is although that is a huge part of it, but also by the support from the developers and the community. For example the documentation on both the Qt frameworks is awesome and there are a lot of resources out there to learn from. Also they have adapted their Qt designer to work with the Python frameworks so one can design them physically and then use them in code. The other frameworks have this ability but it really is so much easier with Qt. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Simplest Wordpress Blog, Part 2]]></title>
    <link href="http://oracal.github.com/blog/2011/03/06/the-simplest-wordpress-blog-part-2/"/>
    <updated>2011-03-06T21:07:32+00:00</updated>
    <id>http://oracal.github.com/blog/2011/03/06/the-simplest-wordpress-blog-part-2</id>
    <content type="html"><![CDATA[<p>This is the second part of my simple wordpress tutorial, this will go through showing the blog post, the comments section and the search functionally. Putting this tutorial together with the last you&#8217;ll have a completely unstylized functioning blog, which you can add all the styling you want.</p>

<!-- more -->


<p>So now onto single.php, this is the code to display how a single post is shown. First we&#8217;ll look at the code to insert the post.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_header</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="nx">the_post</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;h3&gt;</span><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&lt;/h3&gt;</span>
</span><span class='line'><span class="x">  &lt;h4&gt;</span><span class="cp">&lt;?php</span> <span class="nx">the_author</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&lt;/h4&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">the_content</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="nv">$year</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$month</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$day</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  Published: &lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_day_link</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$year</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">$month</span><span class="s2">&quot;</span><span class="p">,</span><span class="s2">&quot;</span><span class="si">$day</span><span class="s2">&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="nx">the_time</span><span class="p">(</span><span class="s1">&#39;F j, Y&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;</span>
</span><span class='line'><span class="x">  Filed Under: </span><span class="cp">&lt;?php</span> <span class="nx">the_category</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">the_tags</span><span class="p">(</span><span class="s1">&#39;Tags: &#39;</span><span class="p">,</span> <span class="s1">&#39; : &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">comments_template</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">previous_post_link</span><span class="p">(</span><span class="s1">&#39;%link&#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;laquo; Previous Post&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">next_post_link</span><span class="p">(</span><span class="s1">&#39;%link&#39;</span><span class="p">,</span> <span class="s1">&#39;Next Post &amp;raquo;&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endwhile</span><span class="p">;</span> <span class="k">else</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;p&gt;Sorry, no posts matched your criteria.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_sidebar</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_footer</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We first set up the loop that checks for the current post using the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="nx">the_post</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We then extract the required information for the post using wordpress functions, the following commands are the most commonly used:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="c1">// echo&#39;s the post title ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_author</span><span class="p">();</span> <span class="c1">// echo&#39;s the post author ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_content</span><span class="p">();</span> <span class="c1">// echo&#39;s the post content ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_time</span><span class="p">();</span> <span class="c1">// echo&#39;s the date/time of the post ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_category</span><span class="p">();</span> <span class="c1">// echo&#39;s the category of the post as well as a link to the respective category page ?&gt;</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nx">the_tags</span><span class="p">();</span> <span class="c1">// echo&#39;s the tags of the post as well as a link to the respective tag page ?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the only other functions which we need to include in the single.php file and which we haven&#8217;t seen already is the worpdress function which pulls in the comments.php file and the functions for linking to the next and previous posts:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">comments_template</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">previous_post_link</span><span class="p">(</span><span class="s1">&#39;%link&#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;laquo; Previous Post&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">next_post_link</span><span class="p">(</span><span class="s1">&#39;%link&#39;</span><span class="p">,</span> <span class="s1">&#39;Next Post &amp;raquo;&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The entire single.php follows a very similar pattern to the index.php so you should have no real problem following it, the comments.php file is slightly more complicated and probably the most complicated part of the wordpress system, but they still manage to make it quite simple for us. I&#8217;m going to split the file comments.php up into managable chucks and explain each chunk, heres the first:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="c1">// Do not delete these lines</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;SCRIPT_FILENAME&#39;</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;comments.php&#39;</span> <span class="o">==</span> <span class="nb">basename</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;SCRIPT_FILENAME&#39;</span><span class="p">]))</span>
</span><span class='line'>  <span class="k">die</span> <span class="p">(</span><span class="s1">&#39;Please do not load this page directly. Thanks!&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nx">post_password_required</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;p&gt;This post is password protected. Enter the password to view comments.&lt;/p&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is wordpress&#8217;s own code, do not touch this. It pretty much stops people from accessing the page directly and checks to see if you need a password to view comments, not really something we should worry about, but make sure you include it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">have_comments</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h3&gt;</span><span class="cp">&lt;?php</span> <span class="nx">comments_number</span><span class="p">(</span><span class="s1">&#39;No Responses&#39;</span><span class="p">,</span> <span class="s1">&#39;One Response&#39;</span><span class="p">,</span> <span class="s1">&#39;% Responses&#39;</span> <span class="p">);</span><span class="cp">?&gt;</span><span class="x"> to &quot;</span><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&quot;&lt;/h3&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">previous_comments_link</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">next_comments_link</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;ol&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">wp_list_comments</span><span class="p">(</span><span class="s1">&#39;avatar_size=48&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/ol&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">previous_comments_link</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">next_comments_link</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This chunk of code tests whether there are comments in the wordpress query, and if there is, then the code first of all uses</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">comments_number</span><span class="p">(</span><span class="s1">&#39;No Responses&#39;</span><span class="p">,</span> <span class="s1">&#39;One Response&#39;</span><span class="p">,</span> <span class="s1">&#39;% Responses&#39;</span> <span class="p">);</span><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p> to print out a statement depending on how many comments there are, the parameters given to the function show quite nicely exactly what the function does and what each parameter does.</p>

<p>Next we provide a link to pages of comments for when pagination is used and then we output the comments using this handy WordPress function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">wp_list_comments</span><span class="p">(</span><span class="s1">&#39;avatar_size=48&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The parameter given here tells us what sixe to put the avatar images on the site, there are a few other parameters and you should probably check out on the wordpress codex, but for our simple blog we don&#8217;t need it.</p>

<p>Next we have the chunk of code that will generally just display nothing, but you might want to put in a message saying that there are no comments or something like that here.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">comments_open</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">       </span><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This chunk outputs the form where comments are inputted, its quite long because it displays a slightly different form if the user is already logged in. Which is easily checked using:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">is_user_logged_in</span><span class="p">())</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the code is pretty easy to follow:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">comments_open</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;comment_registration&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">is_user_logged_in</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;p&gt;You must be &lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;siteurl&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/wp-login.php?redirect_to=</span><span class="cp">&lt;?php</span> <span class="nx">the_permalink</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;logged in&lt;/a&gt; to post a comment.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;form action=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;siteurl&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/wp-comments-post.php&quot; method=&quot;post&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;fieldset&gt;</span>
</span><span class='line'><span class="x">          &lt;legend&gt;</span><span class="cp">&lt;?php</span> <span class="nx">comment_form_title</span><span class="p">(</span><span class="s1">&#39;Leave a Comment&#39;</span><span class="p">,</span><span class="s1">&#39;Leave a Reply to %s&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/legend&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">is_user_logged_in</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">          Logged in as &lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;siteurl&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/wp-admin/profile.php&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$user_identity</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;. &lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_option</span><span class="p">(</span><span class="s1">&#39;siteurl&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/wp-login.php?action=logout&quot; title=&quot;Log out of this account&quot;&gt;Logout &amp;raquo;&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;label&gt;Comment: &lt;textarea name=&quot;comment&quot; id=&quot;comment&quot; cols=&quot;50&quot; rows=&quot;20&quot;&gt;&lt;/textarea&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">      </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">is_user_logged_in</span><span class="p">()</span> <span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          &lt;label&gt;Name: &lt;em&gt;Required&lt;/em&gt; &lt;input type=&quot;text&quot; name=&quot;author&quot; id=&quot;author&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$comment_author</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;label&gt;Email: &lt;em&gt;Required, not published&lt;/em&gt; &lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$comment_author_email</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot;/&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;label&gt;Homepage: &lt;input type=&quot;text&quot; name=&quot;url&quot; id=&quot;url&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$comment_author_url</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;label&gt;Comment: &lt;textarea name=&quot;comment&quot; id=&quot;comment&quot; cols=&quot;50&quot; rows=&quot;20&quot;&gt;&lt;/textarea&gt;&lt;/label&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;input type=&quot;submit&quot; value=&quot;Post Comment&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;comment_post_ID&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$id</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x">&quot; /&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;/fieldset&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="nx">do_action</span><span class="p">(</span><span class="s1">&#39;comment_form&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">ID</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="c1">// if you delete this the sky will fall on your head ?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing you might not understand is the final function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">do_action</span><span class="p">(</span><span class="s1">&#39;comment_form&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">ID</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>which pretty much tells the form what to do with the information. And so there we have it the most simple comments implementaation in the wordpress framework. One last bit to go over is the nice search functionality wordpress has. This is implemented using a theme&#8217;s search.php file. I&#8217;m not going to go too much in depth into this as it is very similar to index.php but I thought I would show you the code just to round off this article, so here you go:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_header</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;form method=&quot;get&quot; id=&quot;searchform&quot; action=&quot;</span><span class="cp">&lt;?php</span> <span class="nx">bloginfo</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">/&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;input type=&quot;text&quot; value=&quot;</span><span class="cp">&lt;?php</span> <span class="nx">the_search_query</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&quot; name=&quot;s&quot; id=&quot;s&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;input type=&quot;submit&quot; id=&quot;searchsubmit&quot; value=&quot;Search&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h2&gt;Search Results&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">while</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="nx">the_post</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;h3&gt;&lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="nx">the_permalink</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x">&quot; rel=&quot;bookmark&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;&lt;/h3&gt;</span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="nx">the_excerpt</span><span class="p">(</span><span class="s1">&#39;Read the rest of this entry &amp;raquo;&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span>
</span><span class='line'>          <span class="nv">$year</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$month</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$day</span> <span class="o">=</span> <span class="nx">get_the_time</span><span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">          &lt;a href=&quot;</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nx">get_day_link</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$year</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">$month</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">$day</span><span class="s2">&quot;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&quot;&gt;</span><span class="cp">&lt;?php</span> <span class="nx">the_time</span><span class="p">(</span><span class="s1">&#39;F j, Y&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">&lt;/a&gt;</span>
</span><span class='line'><span class="x">          Filed Under: </span><span class="cp">&lt;?php</span> <span class="nx">the_category</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">          </span><span class="cp">&lt;?php</span> <span class="nx">the_tags</span><span class="p">(</span><span class="s1">&#39;Tags:&#39;</span><span class="p">,</span> <span class="s1">&#39; : &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">endwhile</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">next_posts_link</span><span class="p">(</span><span class="s1">&#39;&amp;laquo; Older&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="nx">previous_posts_link</span><span class="p">(</span><span class="s1">&#39;Newer &amp;raquo;&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Not Found</span>
</span><span class='line'><span class="x">  &lt;p&gt;Sorry, but you are looking for something that isn&#39;t here.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_sidebar</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_footer</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this will help when designing your new wordpress blog, happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Simplest WordPress Blog]]></title>
    <link href="http://oracal.github.com/blog/2011/03/01/the-simplest-wordpress-blog/"/>
    <updated>2011-03-01T21:28:14+00:00</updated>
    <id>http://oracal.github.com/blog/2011/03/01/the-simplest-wordpress-blog</id>
    <content type="html"><![CDATA[<p>So I like to start all my Wordpress theme designs with a very simplistic Wordpress base and then add all the complicated functionality found in my themes. I think it is a useful learning tool for the beginner to get used to Wordpress programming. So here&#8217;s my guide for setting up a really simple blog.</p>

<!-- more -->


<p>First of all go to your wordpress root and find the folder wp-content/themes/ and create a new folder with the name of the theme you&#8217;d like. Then set up the meta for the theme. This includes setting up the theme name, description and author, this is done by writing a few details in a new file that you need to create called style.css. At the top of the file put some of the details for your theme, you can replace the details that I have entered for your own:</p>

<p>[css]
/<em>
Theme Name: Basic
Theme URI:
Description: A Starter Theme
Version: 0.1
Author: Thomas Whitton
Author URI: http://www.thomaswhitton.com
Tags: simple, clean, single column
</em>/
[/css]</p>

<p>We&#8217;re not going to be putting anything in the css file, but you may want to put in resets for the most commonly used attributes at the beginning, there are loads of these css code segments on the internet and you just need to to pick one and slightly alter it for you particular site, search for style reset in google :).</p>

<p>Then we&#8217;ll add the index.php, the glue that holds the rest of the files together. First of all we&#8217;ll create the main Wordpress loop, as this is the most important part of the design. This is the main part of your site, generally on the front page, that displays a selection of your posts.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x">;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span> <span class="k">while</span> <span class="p">(</span><span class="nx">have_posts</span><span class="p">())</span> <span class="o">:</span> <span class="nx">the_post</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endwhile</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h2&gt;Not Found&lt;/h2&gt;</span>
</span><span class='line'><span class="x">  &lt;p&gt;Sorry, but you are looking for something that isn&#39;t here.&lt;/p&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this code is just checking if any posts exist and then looping through all the posts in reverse chronilogical order. Now inside the loop nothing is happening so whats the point? Well now we can add some special wordpress functions that will extract the information from each post that we loop through. The code also supplies an error message if there are no posts to display.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">the_permalink</span><span class="p">()</span> <span class="cp">?&gt;</span><span class="x"> // Returns the url of the permalink to the post</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">the_title</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"> // Returns the title of the post</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">the_author</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"> // Returns the author of the post</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">the_content</span><span class="p">(</span><span class="s1">&#39;Read the rest of this entry &amp;raquo;&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"> // Returns the content of the post</span>
</span></code></pre></td></tr></table></div></figure>


<p>These functions are simple enough and are easily used within the loop shown previously, the only slight different is with the_content() function which takes a string as a parameter, this just provides the words for the more text link.</p>

<p>For showing how many comments a post has, still inside the loop, we have a slightly more complicated bit of code. First we have to check certain conditions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">//would normal include different styles for comment closed/open status here</span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;closed&#39;</span> <span class="o">==</span> <span class="nv">$post</span><span class="o">-&gt;</span><span class="na">comment_status</span><span class="p">)</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">else</span> <span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="k">endif</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">comments_popup_link</span><span class="p">(</span><span class="s1">&#39;leave a comment&#39;</span><span class="p">,</span> <span class="s1">&#39;1 comment&#39;</span><span class="p">,</span> <span class="s1">&#39;% comments&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;comments closed&#39;</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we check if the post allows for comments first, create a div for each case and then use the comments_popup_link() function with parameters showing what words we&#8217;d like to show for each case particular case of comment status. It&#8217;s pretty easy to work out what each parameter corresponds to from the example given above.</p>

<p>So thats it for the loop, we obviously have to add a bit more divs and css styling to get everything formatted in the correct way but that goes beyond the scope of this tutorial.</p>

<p>One further bit of code to add after the end of the loop but still inside the if(have_post()) function is the code for pagination. Again wordpress makes this simple and is just a matter of adding:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">next_posts_link</span><span class="p">(</span><span class="s1">&#39;&amp;laquo; Older&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">previous_posts_link</span><span class="p">(</span><span class="s1">&#39;Newer &amp;raquo;&#39;</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>We then have to include the header, sidebar and footer pages which we&#8217;ll quickly create in a minute. This is easily done using the built in Wordpress functions as follows. Adding this function to the top of the index.php file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_header</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>And then to the bottom of index.php:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_sidebar</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?php</span> <span class="nx">get_footer</span><span class="p">();</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>These functions pull in the the header.php, sidebar.php and footer.php repectively, and we&#8217;ll create these files now. First we&#8217;ll create the footer.php as it is simpler. All we need to do is add this code to the file:</p>

<p>[html]
&lt;?php wp_footer(); ?>
</body>
</html>
[/html]</p>

<p>The wp_footer() function provides a hook to the footer of the page which Wordpress and Wordpress plugins can utilize. The rest of the file is just the closing of the html tags: body and html, which we will open shortly in the header.php file.</p>

<p>The sidebar.php gives the code for the sidebar on the site, this is quite a common wordpress blog feature. We&#8217;ll check to see if the their are any widgets loaded in the primary widget area and if not we&#8217;ll put our own in. Then we&#8217;ll add a secondry widget area for less important widgets.</p>

<p>[html]</p>

<ul>
<?php
if (!dynamic_sidebar('primary-widget-area')) : ?>

    <li>
    <?php get_search_form(); ?>
    </li>

    <li>
    <h3>Archives</h3>
    <ul>
    <?php wp_get_archives('type=monthly'); ?>
    </ul>
    </li>

    <li>
    <h3>Meta</h3>
    <ul>
    <?php wp_register(); ?>
    <li><?php wp_loginout(); ?></li>
    <?php wp_meta(); ?>
    </ul>
    </li>

<?php endif;?>
</ul>


<p>&lt;?php if(is_active_sidebar(&#8216;secondary-widget-area&#8217;)) : ?></p>

<pre><code>&lt;ul&gt;
&lt;?php dynamic_sidebar('secondary-widget-area'); ?&gt;
&lt;/ul&gt;
</code></pre>

<p>&lt;?php endif; ?>
[/html]</p>

<p>Now a lot of what is contained in the header.php file is the standard html head code which contains detailed information about your site, now Wordpress again makes this slightly easier by using specific functions, but really most of it is just a copy and paste job.</p>

<p>[html]
&lt;!DOCTYPE html PUBLIC &#8220;-//W3C//DTD XHTML 1.0 Transitional//EN&#8221; &#8220;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&#8221;>
<html xmlns="http://www.w3.org/1999/xhtml" <?php language_attributes(); ?>></p>

<p><head>
<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=&lt;?php bloginfo(&#8216;charset&#8217;); ?>&#8221; />
<title>&lt;?php wp_title(&#8216;:&#8217;, true, &#8216;right&#8217;); ?> &lt;?php bloginfo(&#8216;name&#8217;); ?></title>
<link rel="stylesheet" href="<?php bloginfo('stylesheet_url'); ?>&#8221; type=&#8221;text/css&#8221; media=&#8221;screen&#8221; charset=&#8221;utf-8&#8221; />
<link rel="alternate" type="application/rss+xml" title="<?php bloginfo('name'); ?> RSS Feed&#8221; href=&#8221;&lt;?php bloginfo(&#8216;rss2_url&#8217;); ?>&#8221; />
<link rel="alternate" type="application/atom+xml" title="<?php bloginfo('name'); ?> Atom Feed&#8221; href=&#8221;&lt;?php bloginfo(&#8216;atom_url&#8217;); ?>&#8221; />
<link rel="pingback" href="<?php bloginfo('pingback_url'); ?>&#8221; />
&lt;?php wp_head(); ?>
</head></p>

<p><body <?php body_class(); ?>></p>

<h1><a href="<?php echo get_option('home'); ?>/&#8221; title=&#8221;Home&#8221;><?php bloginfo('name');?></a></h1>


<p>[/html]</p>

<p>The only things to take note of are the rss and atom lines that will automatically generates rss and atom feeds using wordpress functions. Also the final line which creates your blog title and links it to your homepage. Apart from these it is pretty each to tell exacty what each wordpress function is doing.</p>

<p>Now as long as you have customized the look and format of your blog using some div&#8217;s and css you have yourself a front page that shows off your latest posts. At the moment the hyperlinks associated with each post have not been implemented, this will be covered in the 2nd half of this tutorial where we will be looking at individual post pages, the comments for each post and the comment input form.</p>

<p>Please head on over to <a href="http://www.thomaswhitton.com/thomaswhitton/2011/03/06/the-simplest-wordpress-blog-part-2/">Part 2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explorer 16 LCD]]></title>
    <link href="http://oracal.github.com/blog/2011/02/13/explorer-16-lcd/"/>
    <updated>2011-02-13T00:06:12+00:00</updated>
    <id>http://oracal.github.com/blog/2011/02/13/explorer-16-lcd</id>
    <content type="html"><![CDATA[<p>As a follow up to my previous article on the Explorer 16 board we&#8217;ll look at displaying a string on the LCD screen supplied on the board in a very similar manner to the serial connection function. In fact we&#8217;re going to use the standard output of the c standard library to be able to output to the serial port or the LCD screen. The LCD screen is a very important peripheral for displaying useful  information and for quickly debugging programs and doesn&#8217;t require a  connection to a computer, which is handy.</p>

<!-- more -->


<p>Another important point to mention is the fact that we are going to use the Parallel Master Port (PMP) peripheral, new to the PIC24F series PIC. This module has made connecting to many different types of parallel interface much easier and so is useful when connecting to the  LCD.</p>

<p>First of all create a header file called &#8220;lcd.h&#8221;, this will include some useful definitions and function prototypes.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define some useful constants</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// access data register</span>
</span><span class='line'><span class="cp">#define LCDDATA 1</span>
</span><span class='line'><span class="c1">// access command register</span>
</span><span class='line'><span class="cp">#define LCDCMD  0</span>
</span><span class='line'><span class="c1">// PMP data buffer</span>
</span><span class='line'><span class="cp">#define PMDATA  PMDIN1</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">initLCD</span><span class="p">();</span>         <span class="c1">// initialise the LCD</span>
</span><span class='line'><span class="kt">char</span> <span class="nf">readLCD</span><span class="p">(</span><span class="kt">int</span> <span class="n">addr</span><span class="p">);</span> <span class="c1">// read from the LCD</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define some macros that make life a bit easier</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// check if LCD busy</span>
</span><span class='line'><span class="cp">#define busyLCD() readLCD( LCDCMD) &amp; 0x80</span>
</span><span class='line'><span class="c1">// check address of LCD position</span>
</span><span class='line'><span class="cp">#define addrLCD() readLCD( LCDCMD) &amp; 0x7F</span>
</span><span class='line'><span class="c1">// read what is on the LCD</span>
</span><span class='line'><span class="cp">#define getLCD()  readLCD( LCDDATA)</span>
</span><span class='line'><span class="c1">// set cursor position</span>
</span><span class='line'><span class="cp">#define setLCDC( a) writeLCD( LCDCMD, (a &amp; 0x7F) | 0x80)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeLCD</span><span class="p">(</span> <span class="kt">int</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">);</span>    <span class="c1">// write to LCD at particular address</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">putLCD</span><span class="p">(</span><span class="kt">char</span> <span class="n">d</span><span class="p">);</span>    <span class="c1">// send a character to be displayed on screen</span>
</span></code></pre></td></tr></table></div></figure>


<p>The comments pretty much explain the different definitions and macros, the real explanation will be needed for the actual implementation of the functions.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// check if LCD busy</span>
</span><span class='line'><span class="cp">#define busyLCD() readLCD( LCDCMD) &amp; 0x80</span>
</span><span class='line'><span class="c1">// check address of LCD position</span>
</span><span class='line'><span class="cp">#define addrLCD() readLCD( LCDCMD) &amp; 0x7F</span>
</span><span class='line'><span class="c1">// read what is on the LCD</span>
</span><span class='line'><span class="cp">#define getLCD()  readLCD( LCDDATA)</span>
</span><span class='line'><span class="c1">// set cursor position</span>
</span><span class='line'><span class="cp">#define setLCDC( a) writeLCD( LCDCMD, (a &amp; 0x7F) | 0x80)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The four definitions above allow us to check if the LCD is busy,  check the address, get current display and moving the cursor using a  combination of reading the LCD data, checking for the corresponsding  data and writing to the LCD command register .</p>

<p>Again we have an initialisation function which sets up both the PMP and the LCD screen. The LCD is quite a slow electronic component by micro controller standards so we need to put in a few delays during it&#8217;s initialisation. This is accomplished by using the Timer1 module on the PIC24F. After the initialisation we can actually physically check if the LCD is ready to use, rather than putting in our own delays.</p>

<p>In the comments I&#8217;ve put in important information about the specific registers being set, but I suggest you look at the data sheet to see what exactly is happening.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;lcd.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initialise the LCD</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">initLCD</span><span class="p">(</span> <span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// PMP initialization</span>
</span><span class='line'>  <span class="n">PMCON</span> <span class="o">=</span> <span class="mh">0x83BF</span><span class="p">;</span>             <span class="c1">// Enable the PMP</span>
</span><span class='line'>  <span class="n">PMMODE</span> <span class="o">=</span> <span class="mh">0x3FF</span><span class="p">;</span>             <span class="c1">// Master Mode 1</span>
</span><span class='line'>  <span class="n">PMAEN</span> <span class="o">=</span> <span class="mh">0x0001</span><span class="p">;</span>             <span class="c1">// PMA0 enabled</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// initialise TMR1</span>
</span><span class='line'>  <span class="n">T1CON</span> <span class="o">=</span> <span class="mh">0x8030</span><span class="p">;</span>             <span class="c1">// Fosc/2, prescaled 1:256, 16us/tick</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// wait for &gt;30ms</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">2000</span><span class="p">);</span><span class="c1">// 2000 x 16us = 32ms</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//initiate the HD44780 display 8-bit init sequence</span>
</span><span class='line'>  <span class="n">PMADDR</span> <span class="o">=</span> <span class="n">LCDCMD</span><span class="p">;</span>            <span class="c1">// command register</span>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b00111000</span><span class="p">;</span>        <span class="c1">// 8-bit interface, 2 lines, 5x7</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">);</span>   <span class="c1">// 3 x 16us = 48us</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b00001100</span><span class="p">;</span>        <span class="c1">// display ON, cursor off, blink off</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">);</span>   <span class="c1">// 3 x 16us = 48us</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b00000001</span><span class="p">;</span>        <span class="c1">// clear display</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">);</span> <span class="c1">// 100 x 16us = 1.6ms</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b00000110</span><span class="p">;</span>        <span class="c1">// increment cursor, no shift</span>
</span><span class='line'>  <span class="n">TMR1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">while</span><span class="p">(</span> <span class="n">TMR1</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">);</span> <span class="c1">// 100 x 16us = 1.6ms</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we create a function that can read from the data register of the LCD, this will allow us to check things like current position and what is currently being display etc.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// read from the LCD</span>
</span><span class='line'><span class="kt">char</span> <span class="nf">readLCD</span><span class="p">(</span> <span class="kt">int</span> <span class="n">addr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">dummy</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">PMMODEbits</span><span class="p">.</span><span class="n">BUSY</span><span class="p">);</span>    <span class="c1">// wait for PMP to be available</span>
</span><span class='line'>  <span class="n">PMADDR</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>              <span class="c1">// select the command address</span>
</span><span class='line'>  <span class="n">dummy</span> <span class="o">=</span> <span class="n">PMDATA</span><span class="p">;</span>             <span class="c1">// initiate a read cycle, dummy read</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">PMMODEbits</span><span class="p">.</span><span class="n">BUSY</span><span class="p">);</span>    <span class="c1">// wait for PMP to be available</span>
</span><span class='line'>  <span class="k">return</span><span class="p">(</span> <span class="n">PMDATA</span><span class="p">);</span>            <span class="c1">// read the status register</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function above reads from the LCD status register and returns it. It does this by first checking to see if the LCD is busy and then computes a dummy read cycle and then checks the data on the PMP once it is no longer busy.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// write to LCD at particular address</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">writeLCD</span><span class="p">(</span> <span class="kt">int</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">busyLCD</span><span class="p">());</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">PMMODEbits</span><span class="p">.</span><span class="n">BUSY</span><span class="p">);</span>    <span class="c1">// wait for PMP to be available</span>
</span><span class='line'>  <span class="n">PMADDR</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PMDATA</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// send a character to be displayed on screen</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">putLCD</span><span class="p">(</span> <span class="kt">char</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">z</span><span class="p">,</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// section of code to include special characters such as new line</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span><span class="sc">&#39;\n&#39;</span>:
</span><span class='line'>          <span class="n">setLCDC</span><span class="p">(</span><span class="mh">0x40</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span><span class="sc">&#39;\r&#39;</span>:
</span><span class='line'>          <span class="n">z</span> <span class="o">=</span> <span class="n">addrLCD</span><span class="p">();</span>
</span><span class='line'>          <span class="n">z</span><span class="o">=</span><span class="p">(</span><span class="n">z</span><span class="o">+</span><span class="mi">64</span><span class="p">);</span>
</span><span class='line'>          <span class="n">z</span><span class="o">=</span><span class="p">(</span><span class="n">z</span><span class="o">&amp;</span><span class="mh">0x40</span><span class="p">);</span>
</span><span class='line'>          <span class="n">setLCDC</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span><span class="sc">&#39;\t&#39;</span>:
</span><span class='line'>          <span class="n">z</span> <span class="o">=</span> <span class="n">addrLCD</span><span class="p">();</span>
</span><span class='line'>          <span class="n">x</span><span class="o">=</span> <span class="p">(</span><span class="mi">5</span> <span class="o">-</span> <span class="p">(</span><span class="n">z</span><span class="o">%</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>          <span class="n">setLCDC</span><span class="p">((</span><span class="n">z</span><span class="o">+</span><span class="n">x</span><span class="p">));</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nl">default:</span>
</span><span class='line'>          <span class="n">writeLCD</span><span class="p">(</span> <span class="n">LCDDATA</span><span class="p">,</span> <span class="n">d</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The two above functions actually write to the LCD screen, writeLCD is the general command that takes in a character and an address and putLCD automatically writes to the LCD at its current position. In the putLCD command we have created cases for when we send special characters to the LCD, these include the newline character &#8216;\n&#8217;, the carriage return character &#8216;\r&#8217; and the tab character &#8216;\t&#8217;. Each one performs a specific action using the macros that were defined earlier.</p>

<p>Again we need to re-implement the write function in the c standard library. This time we are going to have any output to stdout going to the LCD screen and any output to stderr going to the serial port. All we do is to use the other cases in the switch statement inside the write function to do different things, as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;conu2.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;lcd.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">handle</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>
</span><span class='line'>      <span class="c1">// case for stdout outout</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>              <span class="n">putLCD</span><span class="p">(</span> <span class="o">*</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// case for stderr outout</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>              <span class="n">putU2</span><span class="p">(</span> <span class="o">*</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nl">default:</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To show our library of functions actually work we can create the following main function to test both peripherals.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;conU2.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;lcd.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">initLCD</span><span class="p">();</span>
</span><span class='line'>  <span class="n">InitU2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello lcd&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;hello serial&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The fprintf command allows us to specify the output stream that we want to write to rather than just using printf to output to the default stream of stdout. So in this case stdout is the LCD screen and stderr is the serial port.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginning with the Explorer 16]]></title>
    <link href="http://oracal.github.com/blog/2011/02/05/beginning-with-the-explorer-16/"/>
    <updated>2011-02-05T21:22:48+00:00</updated>
    <id>http://oracal.github.com/blog/2011/02/05/beginning-with-the-explorer-16</id>
    <content type="html"><![CDATA[<p>So I&#8217;ve found it very helpful in the past to teach others things that I have quite a lot of experience in as quite often I learn a few things and at the same time observe a different perspective on a problem, which is very important to a job where problem solving is paramount. So here&#8217;s my beginners tutorial on programming the 16 bit PIC24F family chip on the Explorer 16 board, which by the way is a pretty awesome board to work with. So I&#8217;m just quickly going to show how to light an LED and communicate with the computer via the serial port, these things actually reward the user very quickly with some actual physical output. So here it goes:</p>

<!-- more -->


<p>First of all I&#8217;ll quickly go through the very simple steps to set up your PIC project.</p>

<p>Ok so you&#8217;ll need the MPLAB IDE and the MPLAB C Compiler for PIC24F PIC&#8217;s from the Microchip Website, the IDE is free and you can you get the lite version of the compiler for free. Start a new project in the IDE by going to project wizard and selecting your chip and your compiler in the options. Also you&#8217;ll need to select and add a linker file to your project, it&#8217;s located inside the compiler&#8217;s folder inside the sub folder support/PIC24F/gld/, you need to select the file with your exact chip number on it.</p>

<p>So now you&#8217;re ready to begin actual programming.</p>

<p>The first example I want to show you is the &#8220;Hello World&#8221; of the microcontroller programming field, the lighting of an LED. Now there are already LED&#8217;s on the explorer 16 board so we won&#8217;t have to do any soldering or connecting up, we just need to know the way in which it is connected up. Now I implore you to download the data sheet for both the PIC and the explorer 16 board, they are so useful and will tell you exactly what is connected to what and what each register controls. In our case the 8 LED&#8217;s are connected to PORTA which is basically a set of digital input/output ports which we can control with the PIC. Now to set the first LED (D3) on we need to configure the PORTA to be an output on the first LED. We do this by setting</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">TRISA</span> <span class="o">=</span> <span class="mh">0xFFFE</span>
</span></code></pre></td></tr></table></div></figure>


<p>TRISA is the register of the PIC that controls whether or not a digital i/o pin is an input (bit has value 1) or an output (bit has value 0). The 0x in front of the FFFE means that it is a hexadecimal number which in binary form is: 1111111111111110, setting the very first pin RA0 to an output. You can also set the bit as an output by using</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">TRISAbits</span><span class="p">.</span><span class="n">RA0</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is a handy shortcut when you only really need to change 1 bit.</p>

<p>Ok so we have set the pin as an output, now we want to set whether it is actually giving out current, we do this by setting the pin high, if the pin is low then it gives out no current. To do this we set the first bit of the PORTA register to 1 i.e.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PORTA</span><span class="o">=</span><span class="mh">0x0001</span>
</span></code></pre></td></tr></table></div></figure>


<p>As with all c programs we&#8217;re going to need to put this in the usual main function so set up your main.c file to look like the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">TRISA</span> <span class="o">=</span> <span class="mh">0xFFFE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PORTA</span> <span class="o">=</span> <span class="mh">0x0001</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget to put the header file for your PIC at the top of the file, just use your exact PIC designator with a .h at the end, the same as your linker file. Just a quick note about the while at the end of the code, we need that there so that the PIC doesn&#8217;t complete the program as when it does the LED will turn off, and it will do this so quickly that you will not even see it flash. So now go to project on the top menu and click build all, then select your programmer and program your PIC. The D3 LED should turn on and shows how easy it is to control something physically with some programming and a PIC.</p>

<p>Next I&#8217;ll show you a simple way to use your serial port connection to connect to your computer. A few things you&#8217;ll need before we get going, first of all serial ports are kind of legacy equipment for computers nowadays so it is very unlikely your pc will have one, however they are very easy connection to use and are still widely accepted in the embedded programming world, so you&#8217;ll probably need a usb to serial adapter. Another thing you&#8217;ll need is hyper terminal, a really great simple windows program that will do exactly what we need, however on more modern window versions they don&#8217;t have it included so you might have to download a copy from the internet. So anyway onto the programming.</p>

<p>First of all you to need to initialise the uart2 module on the board so that you can use it with the serial port with particular connection information. I&#8217;m going to put this in a separate function to make it easier in the main program. We&#8217;ll make a library file &#8220;u2.h&#8221; to contain come constants:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// some helpful definitions for setting the uart2 module</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// clear To Send, input, HW handshake</span>
</span><span class='line'><span class="cp">#define CTS _RF12</span>
</span><span class='line'><span class="c1">// request To Send, output, HW handshake</span>
</span><span class='line'><span class="cp">#define RTS _RF13</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initialise the serial port (UART2, 115200@32MHz, 8, N, 1, CTS/RTS )</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">initU2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// send a character to the serial port</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">putU2</span><span class="p">(</span> <span class="kt">int</span> <span class="n">c</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we make the &#8220;u2.c&#8221; file that contains the initialisation function and also the function to send a single ASCII character to the serial port:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;u2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tris control for RTS pin</span>
</span><span class='line'><span class="cp">#define TRTS TRISFbits.TRISF13</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// timing and baud rate settings</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 115200 baud (BREGH=1)</span>
</span><span class='line'><span class="cp">#define BRATE 34</span>
</span><span class='line'><span class="c1">// enable the UART peripheral</span>
</span><span class='line'><span class="cp">#define U_ENABLE 0x8008</span>
</span><span class='line'><span class="c1">// enable transmission</span>
</span><span class='line'><span class="cp">#define U_TX 0x0400</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initialise the serial port (UART2, 115200, 8, N, 1, CTS/RTS )</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">initU2</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">U2BRG</span> <span class="o">=</span> <span class="n">BRATE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">U2MODE</span> <span class="o">=</span> <span class="n">U_ENABLE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">U2STA</span> <span class="o">=</span> <span class="n">U_TX</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TRTS</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="err">       </span> <span class="c1">// make RTS output</span>
</span><span class='line'>  <span class="n">RTS</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">       </span> <span class="c1">// set RTS default status</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// send a character to the UART2 serial port</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">putU2</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">CTS</span><span class="p">);</span><span class="err">  </span> <span class="err">   </span> <span class="err">        </span> <span class="c1">// wait for clear to send</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">U2STAbits</span><span class="p">.</span><span class="n">UTXBF</span><span class="p">);</span><span class="err"> </span> <span class="err"> </span> <span class="c1">// wait while Tx buffer full</span>
</span><span class='line'>  <span class="n">U2TXREG</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this means that the function putU2() has an input of a single character and sends it down the serial port, now what we really want is a function to write an entire string to the serial port. So we are going to reimplement the printf function in the c standard library and use that to send a string to the serial port, its useful since the printf function doesn&#8217;t really have a current output to print to when working on the explorer 16 board, so we create one. To do this we create a new file write.c to override the old write function which is used by printf to actually write the data. So the write file should look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;u2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">write</span><span class="p">(</span><span class="kt">int</span> <span class="n">handle</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">handle</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>      <span class="c1">// case for stdout output</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="n">putU2</span><span class="p">(</span> <span class="o">*</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">default:</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and now in your main function you simply need to initialise the uart2 and then use the printf command to send a string, as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;p24fj128ga010.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;u2.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">initU2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What you will want to do now is to compile and transfer the program to the board and then connect the Explorer 16 to the serial port on your computer (or usb to serial adapter) and open up hyper terminal. Create a new connection on the COM port of your serial port and set the baud rate to 115200, data bits to 8, parity to none, stop bits to 1 and flow control to hardware. Then you should be able to see your board spitting out the word hello on every iteration of the while loop. Now that you have a connection to your board there are a ton of things you can do, the most useful I&#8217;ve encountered are data collection, controlling equipment and debugging. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt Etiquette]]></title>
    <link href="http://oracal.github.com/blog/2011/01/27/qt-etiquette/"/>
    <updated>2011-01-27T20:55:41+00:00</updated>
    <id>http://oracal.github.com/blog/2011/01/27/qt-etiquette</id>
    <content type="html"><![CDATA[<p>So I have been using Qt now for about six months and I have to say it is one of the best frameworks I have ever used, it seems very complete, the documentation for it is amazing and even the Qt IDE: Qt Creator is awesome. Some of the really useful things I find are the signal and slot mechanism, the widget methodology and the expanse of widgets available. So I feel pretty confident with Qt now and just though I&#8217;d share some information that I learned along the way that may or may not be included in the documentation, the sort of info only found by experience. Hopefully this helps a few people out, so here it goes.</p>

<!-- more -->


<p>One thing I found when using signals and slots was that I had trouble connecting signals and slots when they there was a widget inside a widget inside a widget, lets call them A, B and C respectively. Setting up a connection between A and C was impossible, what I had to do was create an intermediate slot inside B that emitted a signal from B, to keep the signal going. This was pretty annoying as I had to create the new slot function and there was a simple solution that I didn&#8217;t get for a while. Connections can be made between a signal and a signal, so that when the first emitted so is the other signal, now this may not be a huge improvement in code, but it looks so much neater and when working on a larger project it is so much easier to follow. A simple example, not sure it&#8217;s really needed, but anyway here it is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">connect</span><span class="p">(</span><span class="n">myButton</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">clicked</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">buttonClicked</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another problem I had with signals and slots was that sometimes I&#8217;d like to quickly take control of my connection and stop it for a while and then reconnect it, and this was fine I could use the</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">QObject:</span><span class="n">disconnect</span>
</span></code></pre></td></tr></table></div></figure>


<p>method to explicitly remove the connection and then reattach it in the normal way. This gets a bit complicated when you are dealing with an important QObject and there a lot of connections that need to be disconnected, half your code would be establishing and disconnecting connections. There&#8217;s a handy method in the QObject toolbox that solves this problem called</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">QObject:</span><span class="n">blockSignals</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function blocks all signals being emitted from an object, if set to true and you can easily remove this block by calling this function again with the false parameter.</p>

<p>These two fixes really helped me fall in love with the signal and slot mechanism behind pretty much any Qt program.</p>

<p>A lot of questions I see paraded around in regards to Qt is about which containers classes to use. Now I have pretty much been brought up on the STL, and know them pretty well but I am a big believer that when using a particular framework that you use the more integrated containers. Not only that but the documentation for the Qt containers insdie the Qt Creator IDE is impressive, press F1 and I have every single meber function and there are a lot of them. Not only that but reading some of the documentation surrounding Qt containers brought me to an underlying methodology called implicitly shared. Which pretty much means that within any Qt container class it will make your code more efficient by reducing the copying with that container, vist the <a href="http://doc.qt.nokia.com/latest/implicit-sharing.html#implicitly-shared">website</a> for more details. Also lots of outputs of other functions within Qt generate the Qt generic classes so the amount of code needed to convert and reconvert would be a bit excessive.</p>

<p>Another thing I liked about Qt was how easy it was to access external applicationsand give input arguemnts and easily receive standard outputs (mainly command line). This has been really useful when making wrappers for some of my commonly used command line applications (a task I try to do whenever learning a new gui framework) this meant I didn&#8217;t have to worry too much about looking through a lot of code and the only way to proceed when using a closed source application. A simple example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// declare a new QProcess</span>
</span><span class='line'><span class="n">QProcess</span> <span class="o">*</span><span class="n">extraction</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QProcess</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define command line arguments</span>
</span><span class='line'><span class="n">QStringList</span> <span class="n">args</span><span class="p">;</span>
</span><span class='line'><span class="n">args</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;e&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/ad&quot;</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/y&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run external application</span>
</span><span class='line'><span class="n">extraction</span><span class="o">-&gt;</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;C:/Program Files/WinRAR/unRAR&quot;</span><span class="p">,</span> <span class="n">args</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get the output from the application</span>
</span><span class='line'><span class="n">QByteArray</span> <span class="n">output</span> <span class="o">=</span> <span class="n">extraction</span><span class="o">-&gt;</span><span class="n">readAllStandardOutput</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this has been at least slightly helpful to anyone who has read it, and for anyone who has yet to make the leap into the Qt framework I say go for it, you won&#8217;t regret it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption Libraries]]></title>
    <link href="http://oracal.github.com/blog/2011/01/20/encryption-libraries/"/>
    <updated>2011-01-20T20:44:29+00:00</updated>
    <id>http://oracal.github.com/blog/2011/01/20/encryption-libraries</id>
    <content type="html"><![CDATA[<p>Recently I was working on a small personal project and I was in need of a quick and easy encryption library that would be able to do quite a few different encryption algorithms. My only real prerequisites were that the library had to be in c++ (well c would do but I&#8217;d prefer it to be in oop form), the encryption algorithms had to include AES 128 and it had to be cross platform. I was quite surprised at how few encryption libraries there were for c++. The three mainstream cross platform libraries that I found were crypto++, Botan and QCA (Qt Cryptology Architecture) (there was also the OpenSSL library but that is written in c).</p>

<!-- more -->


<p>I first looked at QCA considering my project was using Qt and since it uses a Qt-style API and Qt datatypes it was a very obvious first choice. I was quite surprised at how simple it was to perform an encryption, decryption cipher using AES 128, but I did have quite a bit of trouble using the QCA plugin with Qt Creator on my Windows PC, where as with Linux it was working within minutes. This is the code I had to get it working on linux, no guarantees for windows.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// setup the encryption library</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">Initializer</span> <span class="n">init</span><span class="p">;</span>
</span><span class='line'><span class="c1">// define the message to be encrypted</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">arg</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// create a random 16 bit key</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SymmetricKey</span> <span class="n">key</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="c1">// create a random 16 bit initialisation vector</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">InitializationVector</span> <span class="n">iv</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// check the encryption algorithm is supported</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">QCA</span><span class="o">::</span><span class="n">isSupported</span><span class="p">(</span><span class="s">&quot;aes128-cbc-pkcs7&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">qDebug</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;AES128-CBC not supported!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// create the cipher defintion</span>
</span><span class='line'>  <span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span> <span class="n">cipher</span><span class="p">(</span><span class="n">QString</span><span class="p">(</span><span class="s">&quot;aes256&quot;</span><span class="p">),</span> <span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span><span class="o">::</span><span class="n">CBC</span><span class="p">,</span> <span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span><span class="o">::</span><span class="n">DefaultPadding</span><span class="p">,</span> <span class="n">QCA</span><span class="o">::</span><span class="n">Encode</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// start encryption process</span>
</span><span class='line'>  <span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">u</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">f</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">final</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">cipherText</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// end encryption process</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// convert to QString</span>
</span><span class='line'>  <span class="n">QString</span> <span class="n">out</span> <span class="o">=</span> <span class="n">QCA</span><span class="o">::</span><span class="n">arrayToHex</span><span class="p">(</span><span class="n">cipherText</span><span class="p">.</span><span class="n">toByteArray</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the QCA plugin was causing me trouble I thought I&#8217;d try out the other libraries. Crypto++ was the next obvious choice since it has fips accreditation on a lot of its algorithms. It seemed like a really good library with a lot of amazing features. However, I really struggled with its complex code and lack of understandable documentation. It had a very steep learning curve and was definitely not useful for a relative beginner into cryptography. I gave up trying to get it to work and tried my third library: Botan, and I was very glad I did. Here&#8217;s a sample of the code needed to get it woorking but I really struggled with it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// key and IV setup</span>
</span><span class='line'><span class="n">byte</span> <span class="n">key</span><span class="p">[</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span> <span class="p">],</span> <span class="n">iv</span><span class="p">[</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">BLOCKSIZE</span> <span class="p">];</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span> <span class="n">key</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span> <span class="p">);</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span> <span class="n">iv</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">BLOCKSIZE</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string and output setup</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">plaintext</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ciphertext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create cipher Text</span>
</span><span class='line'><span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">Encryption</span> <span class="n">aesEncryption</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span><span class="p">);</span>
</span><span class='line'><span class="n">CryptoPP</span><span class="o">::</span><span class="n">CBC_Mode_ExternalCipher</span><span class="o">::</span><span class="n">Encryption</span> <span class="n">cbcEncryption</span><span class="p">(</span> <span class="n">aesEncryption</span><span class="p">,</span> <span class="n">iv</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CryptoPP</span><span class="o">::</span><span class="n">StreamTransformationFilter</span> <span class="n">stfEncryptor</span><span class="p">(</span><span class="n">cbcEncryption</span><span class="p">,</span> <span class="k">new</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">StringSink</span><span class="p">(</span> <span class="n">ciphertext</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">stfEncryptor</span><span class="p">.</span><span class="n">Put</span><span class="p">(</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*&gt;</span> <span class="p">(</span> <span class="n">plaintext</span><span class="p">.</span><span class="n">data</span><span class="p">()</span> <span class="p">),</span> <span class="n">plaintext</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="n">stfEncryptor</span><span class="p">.</span><span class="n">MessageEnd</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// convert to QString</span>
</span><span class='line'><span class="n">QString</span> <span class="n">output</span> <span class="o">=</span> <span class="n">QString</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">.</span><span class="n">c_str</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now Botan by comparison was very easy to pick up. It uses a very nice programming paradigm using real life metaphors, such as pipes, filters and forks. Pipes are just conduits of data where processes are applied to the data flowing through, such as encrpytion, hashes etc. In Botan terminology these processes are called filters and a pipe can have as many or as little as you like. Forks are where you split the data so that you end up with different outputs using the same data, assuming the filters you use are different. The documentation is also very easy to comprehend. The only downside is that it is not accredited, but it is still a very well respected encryption library none the less.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// initialise the Botan library</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">LibraryInitializer</span> <span class="n">init</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">RandomNumberGenerator</span> <span class="o">*</span><span class="n">rnd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Botan</span><span class="o">::</span><span class="n">AutoSeeded_RNG</span><span class="p">();</span>
</span><span class='line'><span class="c1">// generate random 16 bit key</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">SymmetricKey</span> <span class="n">key</span><span class="p">(</span><span class="o">*</span><span class="n">rnd</span><span class="p">,</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="k">delete</span> <span class="n">rnd</span><span class="p">;</span>
</span><span class='line'><span class="c1">// generate random 16 bit initialisation vector</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">SecureVector</span><span class="o">&lt;</span><span class="n">Botan</span><span class="o">::</span><span class="n">byte</span><span class="o">&gt;</span> <span class="n">raw_iv</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">InitializationVector</span> <span class="n">iv</span><span class="p">(</span><span class="n">raw_iv</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="c1">// define text to be encrypted</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// generate cipher &quot;pipe&quot;</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">Pipe</span> <span class="n">pipe</span><span class="p">(</span><span class="n">get_cipher</span><span class="p">(</span><span class="s">&quot;AES-128/CBC&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">Botan</span><span class="o">::</span><span class="n">ENCRYPTION</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// add text to pipe</span>
</span><span class='line'><span class="n">pipe</span><span class="p">.</span><span class="n">process_msg</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get std:string encrypted output</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">output</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">.</span><span class="n">read_all_as_string</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// convert to Qstring</span>
</span><span class='line'><span class="n">QString</span> <span class="n">qoutput</span> <span class="o">=</span> <span class="n">QString</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>In conclusion if you&#8217;re looking for a quick and cheerful encrpytion library thats easy to pick up, I&#8217;d say go for Botan. Now dependent on the program you&#8217;re building and how much accreditation you need I&#8217;d say you might want to look at some of the others, but it might be worth trying Botan first to quickly create an early, perfectly function version of your program.</p>
]]></content>
  </entry>
  
</feed>
