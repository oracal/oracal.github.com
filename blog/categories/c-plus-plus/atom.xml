<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | Thomas Whitton]]></title>
  <link href="http://www.thomaswhitton.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://www.thomaswhitton.com/"/>
  <updated>2013-04-04T23:32:58+01:00</updated>
  <id>http://www.thomaswhitton.com/</id>
  <author>
    <name><![CDATA[Thomas Whitton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Qt Etiquette]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/01/27/qt-etiquette/"/>
    <updated>2011-01-27T20:55:41+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/01/27/qt-etiquette</id>
    <content type="html"><![CDATA[<p>So I have been using Qt now for about six months and I have to say it is one of the best frameworks I have ever used, it seems very complete, the documentation for it is amazing and even the Qt IDE: Qt Creator is awesome. Some of the really useful things I find are the signal and slot mechanism, the widget methodology and the expanse of widgets available. So I feel pretty confident with Qt now and just though I'd share some information that I learned along the way that may or may not be included in the documentation, the sort of info only found by experience. Hopefully this helps a few people out, so here it goes.</p>

<!-- more -->


<p>One thing I found when using signals and slots was that I had trouble connecting signals and slots when they there was a widget inside a widget inside a widget, lets call them A, B and C respectively. Setting up a connection between A and C was impossible, what I had to do was create an intermediate slot inside B that emitted a signal from B, to keep the signal going. This was pretty annoying as I had to create the new slot function and there was a simple solution that I didn't get for a while. Connections can be made between a signal and a signal, so that when the first emitted so is the other signal, now this may not be a huge improvement in code, but it looks so much neater and when working on a larger project it is so much easier to follow. A simple example, not sure it's really needed, but anyway here it is:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">connect</span><span class="p">(</span><span class="n">myButton</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">clicked</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">buttonClicked</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Another problem I had with signals and slots was that sometimes I'd like to quickly take control of my connection and stop it for a while and then reconnect it, and this was fine I could use the</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">QObject:</span><span class="n">disconnect</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>method to explicitly remove the connection and then reattach it in the normal way. This gets a bit complicated when you are dealing with an important QObject and there a lot of connections that need to be disconnected, half your code would be establishing and disconnecting connections. There's a handy method in the QObject toolbox that solves this problem called</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">QObject:</span><span class="n">blockSignals</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This function blocks all signals being emitted from an object, if set to true and you can easily remove this block by calling this function again with the false parameter.</p>

<p>These two fixes really helped me fall in love with the signal and slot mechanism behind pretty much any Qt program.</p>

<p>A lot of questions I see paraded around in regards to Qt is about which containers classes to use. Now I have pretty much been brought up on the STL, and know them pretty well but I am a big believer that when using a particular framework that you use the more integrated containers. Not only that but the documentation for the Qt containers insdie the Qt Creator IDE is impressive, press F1 and I have every single meber function and there are a lot of them. Not only that but reading some of the documentation surrounding Qt containers brought me to an underlying methodology called implicitly shared. Which pretty much means that within any Qt container class it will make your code more efficient by reducing the copying with that container, vist the <a href="http://doc.qt.nokia.com/latest/implicit-sharing.html#implicitly-shared">website</a> for more details. Also lots of outputs of other functions within Qt generate the Qt generic classes so the amount of code needed to convert and reconvert would be a bit excessive.</p>

<p>Another thing I liked about Qt was how easy it was to access external applicationsand give input arguemnts and easily receive standard outputs (mainly command line). This has been really useful when making wrappers for some of my commonly used command line applications (a task I try to do whenever learning a new gui framework) this meant I didn't have to worry too much about looking through a lot of code and the only way to proceed when using a closed source application. A simple example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// declare a new QProcess</span>
</span><span class='line'><span class="n">QProcess</span> <span class="o">*</span><span class="n">extraction</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QProcess</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// define command line arguments</span>
</span><span class='line'><span class="n">QStringList</span> <span class="n">args</span><span class="p">;</span>
</span><span class='line'><span class="n">args</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;e&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">file</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;/ad&quot;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s">&quot;/y&quot;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// run external application</span>
</span><span class='line'><span class="n">extraction</span><span class="o">-&gt;</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;C:/Program Files/WinRAR/unRAR&quot;</span><span class="p">,</span> <span class="n">args</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// get the output from the application</span>
</span><span class='line'><span class="n">QByteArray</span> <span class="n">output</span> <span class="o">=</span> <span class="n">extraction</span><span class="o">-&gt;</span><span class="n">readAllStandardOutput</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I hope this has been at least slightly helpful to anyone who has read it, and for anyone who has yet to make the leap into the Qt framework I say go for it, you won't regret it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption Libraries]]></title>
    <link href="http://www.thomaswhitton.com/blog/2011/01/20/encryption-libraries/"/>
    <updated>2011-01-20T20:44:29+00:00</updated>
    <id>http://www.thomaswhitton.com/blog/2011/01/20/encryption-libraries</id>
    <content type="html"><![CDATA[<p>Recently I was working on a small personal project and I was in need of a quick and easy encryption library that would be able to do quite a few different encryption algorithms. My only real prerequisites were that the library had to be in c++ (well c would do but I'd prefer it to be in oop form), the encryption algorithms had to include AES 128 and it had to be cross platform. I was quite surprised at how few encryption libraries there were for c++. The three mainstream cross platform libraries that I found were crypto++, Botan and QCA (Qt Cryptology Architecture) (there was also the OpenSSL library but that is written in c).</p>

<!-- more -->


<p>I first looked at QCA considering my project was using Qt and since it uses a Qt-style API and Qt datatypes it was a very obvious first choice. I was quite surprised at how simple it was to perform an encryption, decryption cipher using AES 128, but I did have quite a bit of trouble using the QCA plugin with Qt Creator on my Windows PC, where as with Linux it was working within minutes. This is the code I had to get it working on linux, no guarantees for windows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// setup the encryption library</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">Initializer</span> <span class="n">init</span><span class="p">;</span>
</span><span class='line'><span class="c1">// define the message to be encrypted</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">arg</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// create a random 16 bit key</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SymmetricKey</span> <span class="n">key</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="c1">// create a random 16 bit initialisation vector</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">InitializationVector</span> <span class="n">iv</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// check the encryption algorithm is supported</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">QCA</span><span class="o">::</span><span class="n">isSupported</span><span class="p">(</span><span class="s">&quot;aes128-cbc-pkcs7&quot;</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">qDebug</span><span class="p">()</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;AES128-CBC not supported!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">else</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// create the cipher defintion</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span> <span class="n">cipher</span><span class="p">(</span><span class="n">QString</span><span class="p">(</span><span class="s">&quot;aes256&quot;</span><span class="p">),</span> <span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span><span class="o">::</span><span class="n">CBC</span><span class="p">,</span> <span class="n">QCA</span><span class="o">::</span><span class="n">Cipher</span><span class="o">::</span><span class="n">DefaultPadding</span><span class="p">,</span> <span class="n">QCA</span><span class="o">::</span><span class="n">Encode</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">);</span>
</span><span class='line'><span class="c1">// start encryption process</span>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">u</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">f</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">final</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">QCA</span><span class="o">::</span><span class="n">SecureArray</span> <span class="n">cipherText</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="c1">// end encryption process</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// convert to QString</span>
</span><span class='line'><span class="n">QString</span> <span class="n">out</span> <span class="o">=</span> <span class="n">QCA</span><span class="o">::</span><span class="n">arrayToHex</span><span class="p">(</span><span class="n">cipherText</span><span class="p">.</span><span class="n">toByteArray</span><span class="p">());</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Since the QCA plugin was causing me trouble I thought I'd try out the other libraries. Crypto++ was the next obvious choice since it has fips accreditation on a lot of its algorithms. It seemed like a really good library with a lot of amazing features. However, I really struggled with its complex code and lack of understandable documentation. It had a very steep learning curve and was definitely not useful for a relative beginner into cryptography. I gave up trying to get it to work and tried my third library: Botan, and I was very glad I did. Here's a sample of the code needed to get it woorking but I really struggled with it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// key and IV setup</span>
</span><span class='line'><span class="n">byte</span> <span class="n">key</span><span class="p">[</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span> <span class="p">],</span> <span class="n">iv</span><span class="p">[</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">BLOCKSIZE</span> <span class="p">];</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span> <span class="n">key</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span> <span class="p">);</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span> <span class="n">iv</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">BLOCKSIZE</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// string and output setup</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">plaintext</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ciphertext</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// create cipher Text</span>
</span><span class='line'><span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">Encryption</span> <span class="n">aesEncryption</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">AES</span><span class="o">::</span><span class="n">DEFAULT_KEYLENGTH</span><span class="p">);</span>
</span><span class='line'><span class="n">CryptoPP</span><span class="o">::</span><span class="n">CBC_Mode_ExternalCipher</span><span class="o">::</span><span class="n">Encryption</span> <span class="n">cbcEncryption</span><span class="p">(</span> <span class="n">aesEncryption</span><span class="p">,</span> <span class="n">iv</span> <span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CryptoPP</span><span class="o">::</span><span class="n">StreamTransformationFilter</span> <span class="n">stfEncryptor</span><span class="p">(</span><span class="n">cbcEncryption</span><span class="p">,</span> <span class="k">new</span> <span class="n">CryptoPP</span><span class="o">::</span><span class="n">StringSink</span><span class="p">(</span> <span class="n">ciphertext</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="n">stfEncryptor</span><span class="p">.</span><span class="n">Put</span><span class="p">(</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*&gt;</span> <span class="p">(</span> <span class="n">plaintext</span><span class="p">.</span><span class="n">data</span><span class="p">()</span> <span class="p">),</span> <span class="n">plaintext</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="n">stfEncryptor</span><span class="p">.</span><span class="n">MessageEnd</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// convert to QString</span>
</span><span class='line'><span class="n">QString</span> <span class="n">output</span> <span class="o">=</span> <span class="n">QString</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">.</span><span class="n">c_str</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now Botan by comparison was very easy to pick up. It uses a very nice programming paradigm using real life metaphors, such as pipes, filters and forks. Pipes are just conduits of data where processes are applied to the data flowing through, such as encrpytion, hashes etc. In Botan terminology these processes are called filters and a pipe can have as many or as little as you like. Forks are where you split the data so that you end up with different outputs using the same data, assuming the filters you use are different. The documentation is also very easy to comprehend. The only downside is that it is not accredited, but it is still a very well respected encryption library none the less.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// initialise the Botan library</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">LibraryInitializer</span> <span class="n">init</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Botan</span><span class="o">::</span><span class="n">RandomNumberGenerator</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">rnd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Botan</span><span class="o">::</span><span class="n">AutoSeeded_RNG</span><span class="p">();</span>
</span><span class='line'><span class="c1">// generate random 16 bit key</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">SymmetricKey</span> <span class="n">key</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">rnd</span><span class="p">,</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="k">delete</span> <span class="n">rnd</span><span class="p">;</span>
</span><span class='line'><span class="c1">// generate random 16 bit initialisation vector</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">SecureVector</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Botan</span><span class="o">::</span><span class="n">byte</span><span class="o">&gt;</span> <span class="n">raw_iv</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">InitializationVector</span> <span class="n">iv</span><span class="p">(</span><span class="n">raw_iv</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="c1">// define text to be encrypted</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;Text to be encrypted&quot;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// generate cipher &quot;pipe&quot;</span>
</span><span class='line'><span class="n">Botan</span><span class="o">::</span><span class="n">Pipe</span> <span class="n">pipe</span><span class="p">(</span><span class="n">get_cipher</span><span class="p">(</span><span class="s">&quot;AES-128/CBC&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">Botan</span><span class="o">::</span><span class="n">ENCRYPTION</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// add text to pipe</span>
</span><span class='line'><span class="n">pipe</span><span class="p">.</span><span class="n">process_msg</span><span class="p">(</span><span class="n">str</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// get std:string encrypted output</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">output</span> <span class="o">=</span> <span class="n">pipe</span><span class="p">.</span><span class="n">read_all_as_string</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// convert to Qstring</span>
</span><span class='line'><span class="n">QString</span> <span class="n">qoutput</span> <span class="o">=</span> <span class="n">QString</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In conclusion if you're looking for a quick and cheerful encrpytion library thats easy to pick up, I'd say go for Botan. Now dependent on the program you're building and how much accreditation you need I'd say you might want to look at some of the others, but it might be worth trying Botan first to quickly create an early, perfectly function version of your program.</p>
]]></content>
  </entry>
  
</feed>
